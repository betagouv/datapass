{"version":3,"sources":["../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../consent.main.css","<no source>","../../../../../../src/component/consent/style/module/_placeholder.scss","../../../../../../src/core/style/typography/tool/_styles.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/core/style/display/tool/_display.scss","../../../../../../src/core/style/spacing/tool/_space.scss","../../../../../../src/core/style/spacing/function/_space.scss","../../../../../../src/component/consent/style/module/_banner.scss","../../../../../../src/core/style/spacing/tool/_position.scss","../../../../../../src/core/style/spacing/tool/_size.scss","../../../../../../src/core/style/spacing/tool/_z-index.scss","../../../../../../src/component/consent/style/module/_services.scss","../../../../../../src/core/style/selector/tool/_nest.scss","../../../../../../src/component/link/style/tool/_icon.scss","../../../../../../src/component/link/style/tool/_size.scss","../../../../../../src/core/style/function/_unit.scss","../../../../../../src/component/consent/style/_setting.scss","../../../../../../src/core/style/icon/_tool.scss","../../../../../../src/core/style/action/tool/_hover.scss","../../../../../../src/core/style/reset/tool/_link.scss","../../../../../../src/component/consent/style/module/_manager.scss","../../../../../../src/core/style/typography/tool/_font-weight.scss","../../../../../../src/core/style/typography/setting/_font-weight.scss","../../../../../../src/component/consent/style/_scheme.scss","../../../../../../src/core/style/selector/tool/_breakpoint.scss"],"names":[],"mappings":"AAgBE,gBCiLF;ACjMA;;GAAA,ACKA,wBC8FI,yBAA6B,CAA7B,0BAA6B,CC3D3B,6CAAQ,CCrBV,kBAAa,CARb,YAAa,CAIb,qBAAgB,CAQhB,sBAAiB,CCQjB,iBC+DoB,CLtFtB,iBFKF,CQRA,2CJ6CI,gDJxBJ,CQrBA,mBL8FI,uBAA6B,CAA7B,wBAA6B,CC3D3B,6CAAQ,CK1BV,QAAQ,CLoCR,qDAAU,CKjCV,MAAM,CDVR,4BAAsC,CAGtC,aAAc,CFqBZ,YC+DoB,CExFtB,cAAU,CCkDN,UAAO,CCxCX,YXUF,CQJE,0BLEA,kBAA6C,CAW3C,eAAiF,CARjF,kBAA6D,CGA3D,kBNgBN,CQhBE,4BFAI,mBCmEkB,CDnElB,iBN4BN,CY/CA,oBHFE,iBT6EF,CY3EA,iCPGI,YAAa,CAIb,qBAAgB,CCgBhB,mBC+DoB,CK9EpB,eAAiB,CFwCf,UVmCN,CYnFA,4CNuBI,mBN8EJ,CYrGA,wFNmBM,eN4FN,CYlFE,2BTbA,kBAA6C,CAW3C,eAAiF,CARjF,kBAA6D,CGI7D,QMSiB,CNTjB,qBNgGJ,CY7EE,0BT1BA,iBAA6C,CAG3C,kBAA6D,CGA3D,oBCmEkB,CDnElB,iBNwHN,CYnFE,8BNrCI,oBCmEkB,CDnElB,kBCmEkB,CGtClB,UVsHN,CavKI,gED+DE,sBAAuB,CAEvB,aAAc,CE1DhB,0BAA2B,CCL7B,iBCkBgD,CDjBhD,kBRoFsB,CO1DpB,eAAgB,CADhB,cAAe,CCtBjB,YERiB,CH6Bf,gBAAiB,CRHjB,SN6JJ,CD5KE,uEmBmCA,WALU,CAaV,4CAJ0E,CJftE,cEb4C,CFY5C,kBPuDkB,COxDlB,mBCHwB,Cf8J9B,CDjLE,2FmBmCA,WALU,CAaV,0ClBiJF,CY1HI,kCOhBF,mBAAkB,Cd/ChB,kBAAa,CAXb,mBAAoB,CAOpB,kBAAgB,COqEd,iBZgIN,CDpME,wCUFE,QAAQ,CWSV,gCAAiC,CrBJ7B,UaqEiB,CbjEjB,aAAS,CWoCT,0BAAQ,CD1CV,MAAM,CAXR,iBAAU,CAKR,OAAO,CAHP,KAAK,CCgDH,uBVyKN,CY/HE,4BPvFE,YAAa,CAIb,kBAAgB,CAYhB,cL4MJ,CY/NA,oCA0GI,iBZuIJ,CYjPA,6ENmBM,iBNkON,CD7OE,6DAGI,UasGkB,CblGlB,aAAS,CWoCT,aAAQ,CEiEN,wBAA+B,CHtHrC,iBAAU,CGuHJ,UL/BgB,CGtClB,SV+MN,CYjIA,qBN3GM,oBCmEkB,CDnElB,gBCmEkB,CGtClB,UVwNN,CY1IA,6FRiCI,eJ6GJ,CY9IA,uHNvGI,SNyPJ,CYlJA,iEN3GM,qBNiQN,CYtJA,gDN3GM,kBN2QN,CYhKA,iDA6BM,KZuIN,CYpKA,+CN3GM,oBCmEkB,CDnElB,iBNoRN,CqBzSE,4BfqBI,aN8RN,CqBnTG,uDlBkBD,cAA6C,CmBL7C,eCZY,CpBoBV,kBAA6D,CGI7D,kBepB2B,CADzB,UrBuTN,CqB3TG,wDAoBG,0BAA2B,CAE3B,eAAiB,CADjB,KAAM,CAFN,UrB2TN,CqB1SE,6BffI,mBCmEkB,CDnElB,eN4UN,CqBlWA,qDjBkKI,eJoMJ,CwB5VE,gDpBmCE,sDAAU,CAAV,8BJ0UJ,CD5WE,8HKkCE,qDJ+UJ,CyB/WI,wBjBbJ,mBAWI,aD8EoB,CC7EpB,WD6EoB,CC3EpB,4BAAsC,CADtC,eD4EoB,CD/DpB,YNIF,CQbA,0BLEA,iBAA6C,CAG3C,mBHsBF,CQtBA,4BFAI,eNiCJ,CYpDF,iCPGI,YAAa,CAIb,kBAAgB,CAYhB,cAAW,CCIX,mBNiEF,CYxFF,4CNuBI,sBNmFF,CY7EA,2BTbA,iBAA6C,CAG3C,mBAA6D,CO6B3D,QAAO,CV6EX,CYnFA,0BNvBI,mBCmEkB,CDnElB,iBCmEkB,CGtClB,QAAO,CVgGX,CYtDA,4BP/EE,kBAAa,CARb,YAAa,CAIb,kBAAgB,CAQhB,wBAAiB,CCIf,eM6EwB,CHlG5B,iBAAU,CAKR,OAAO,CAHP,WAAK,CCgDH,SV4LJ,CY9GF,6DN3GM,kBNsQJ,CY3JF,+CN3GM,oBNyRJ,CAhRF,CyBlBI,wBJZD,uDAUK,SrBsTN,CqBhUC,wDA2BK,wBAAyB,CADzB,iBAAkB,CADlB,SrB4TN,CApBF,CyBrTI,wBJZD,+GA+BK,SrB4TN,CApBF","file":"consent.main.min.css","sourcesContent":["////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  CONSENT MAIN\n\\* ------------------------------------ */\n.fr-consent-placeholder {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 5rem 2rem;\n  text-align: center;\n  --text-spacing: 0 0 1.5rem;\n  --title-spacing: 0 0 0.5rem;\n}\n\n.fr-consent-banner {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  max-height: calc(100% - 8rem);\n  padding: 1rem;\n  z-index: 4500;\n  overflow: auto;\n  --text-spacing: 0 0 1rem;\n  --title-spacing: 0 0 1rem;\n}\n\n@media (min-width: 48em) {\n  .fr-consent-banner {\n    padding: 2rem;\n    bottom: 2.5rem;\n    left: 2.5rem;\n    max-width: 40rem;\n    max-height: calc(100% - 5rem);\n  }\n}\n\n.fr-consent-banner__title {\n  font-weight:  700 ;\n  font-size:  1.125rem ;\n  line-height:  1.5rem ;\n  margin-bottom: 1rem;\n}\n\n@media (min-width: 48em) {\n  .fr-consent-banner__title {\n    font-size:  1.25rem ;\n    line-height:  1.75rem ;\n  }\n}\n\n.fr-consent-banner__buttons {\n  margin-top: 1.5rem;\n  margin-bottom: -1rem;\n}\n\n@media (min-width: 48em) {\n  .fr-consent-banner__buttons {\n    margin-top: 2rem;\n  }\n}\n\n/**\n* Consent service correspond à un bloc de finalité (titre, radios, description)\n**/\n.fr-consent-service {\n  position: relative;\n  /**\n  * Nom du service\n  **/\n  /**\n  * Description du service\n  **/\n  /**\n  * Bloc dépliable, contient des sous services\n  **/\n  /**\n  * Conteneur des radio-group\n  **/\n  /**\n  * Groupe de radios avec séparateur\n  **/\n}\n\n.fr-consent-service > .fr-fieldset {\n  padding: 0 0 1.25rem;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  position: initial;\n}\n\n@media (min-width: 48em) {\n  .fr-consent-service > .fr-fieldset {\n    padding: 0 0 1.25rem;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-consent-service > .fr-fieldset {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n  }\n}\n\n.fr-consent-service:last-child > .fr-fieldset {\n  padding: 2rem 0 1rem;\n}\n\n@media (min-width: 48em) {\n  .fr-consent-service:last-child > .fr-fieldset {\n    padding: 1.25rem 0 1rem;\n  }\n}\n\n.fr-consent-service:last-child > .fr-fieldset .fr-consent-service > .fr-fieldset:last-child {\n  margin-bottom: 0;\n}\n\n.fr-consent-service__title {\n  font-weight:  700 ;\n  font-size:  1.125rem ;\n  line-height:  1.5rem ;\n  padding: 2rem 0 0.75rem;\n  margin: 0;\n}\n\n@media (min-width: 48em) {\n  .fr-consent-service__title {\n    font-size:  1.25rem ;\n    line-height:  1.75rem ;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-consent-service__title {\n    width: 50%;\n  }\n}\n\n.fr-consent-service__desc {\n  font-size:  0.875rem ;\n  line-height:  1.5rem ;\n  margin-bottom: 0.75rem;\n  margin-top: 0.75rem;\n}\n\n@media (min-width: 48em) {\n  .fr-consent-service__desc {\n    margin-top: 0.25rem;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-consent-service__desc {\n    margin-right: 1.5rem;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-consent-service__desc {\n    width: 60%;\n  }\n}\n\n.fr-consent-service__collapse {\n  margin-top: -0.25rem;\n  margin-bottom: 0.75rem;\n  width: 100%;\n  /**\n    * Bouton d'ouverture/fermeture du collapse\n    **/\n}\n\n.fr-consent-service__collapse .fr-consent-service__collapse-btn {\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n  min-height: 0;\n  padding: -0.75rem 0;\n  flex-direction: row-reverse;\n  overflow: initial;\n  max-width: none;\n  max-height: none;\n  background: transparent;\n  padding: 0;\n  color: inherit;\n}\n\n.fr-consent-service__collapse .fr-consent-service__collapse-btn::before {\n  font: normal normal normal 1.5rem/1 dsfr-icon;\n  content: \"\";\n}\n\n.fr-consent-service__collapse .fr-consent-service__collapse-btn::before {\n  margin-right: -0.25rem;\n  margin-left: 0.25rem;\n  font-size: 1rem;\n}\n\n.fr-consent-service__collapse .fr-consent-service__collapse-btn[aria-expanded=\"true\"]::before {\n  font: normal normal normal 1rem/1 dsfr-icon;\n  content: \"\";\n}\n\n.fr-consent-service__collapse-btn {\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n  position: relative;\n  --blend-full-size: 0;\n}\n\n.fr-consent-service__collapse-btn::after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: calc(100% - 1rem);\n  height: calc(100% - 0.25rem);\n  box-shadow: var(--link-underline);\n}\n\n.fr-consent-service__radios {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n@media (min-width: 48em) {\n  .fr-consent-service__radios {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-end;\n    margin-bottom: 0;\n    position: absolute;\n    top: 1.25rem;\n    right: 0;\n    width: 50%;\n  }\n}\n\n.fr-consent-service .fr-radio-group {\n  position: relative;\n}\n\n.fr-consent-service .fr-radio-group:not(:last-child) input[type=\"radio\"] + label {\n  margin-right: 3rem;\n}\n\n.fr-consent-service .fr-radio-group:not(:first-child)::before {\n  content: \"\";\n  display: block;\n  width: 1px;\n  height: 1.5rem;\n  position: absolute;\n  left: calc(-1.5rem - 1px);\n  top: 0.75rem;\n}\n\n/**\n* fr-consent-services contient les sous services\n**/\n.fr-consent-services {\n  margin-top: 0.5rem;\n  margin-bottom: -0.5rem;\n  width: 100%;\n}\n\n.fr-consent-services .fr-consent-service, .fr-consent-services .fr-consent-service:last-child {\n  box-shadow: none;\n}\n\n.fr-consent-services .fr-consent-service > .fr-fieldset, .fr-consent-services .fr-consent-service:last-child > .fr-fieldset {\n  padding: 0;\n}\n\n.fr-consent-services .fr-consent-service:last-child > .fr-fieldset {\n  margin-bottom: 1.25rem;\n}\n\n@media (min-width: 48em) {\n  .fr-consent-services .fr-consent-service + .fr-consent-service {\n    margin-top: -0.25rem;\n  }\n}\n\n.fr-consent-services .fr-consent-service__title {\n  padding-top: 0.75rem;\n}\n\n.fr-consent-services .fr-consent-service__radios {\n  top: 0;\n}\n\n.fr-consent-services .fr-consent-service__desc {\n  margin-bottom: 0.75rem;\n  margin-top: 0.25rem;\n}\n\n@media (min-width: 48em) {\n  .fr-consent-services .fr-consent-service__desc {\n    margin-bottom: 0.25rem;\n  }\n}\n\n.fr-consent-manager__header {\n  padding-top: 0;\n}\n\n.fr-consent-manager__header .fr-consent-service__title {\n  width: 100%;\n  padding: 0 0 0.75rem 0;\n  font-size:  1rem ;\n  line-height:  1.5rem ;\n  font-weight: 400;\n}\n\n@media (min-width: 62em) {\n  .fr-consent-manager__header .fr-consent-service__title {\n    width: 44%;\n  }\n}\n\n@media (min-width: 78em) {\n  .fr-consent-manager__header .fr-consent-service__title {\n    width: 50%;\n  }\n}\n\n.fr-consent-manager__header .fr-consent-service__radios {\n  width: 100%;\n  justify-content: flex-start;\n  top: 0;\n  position: initial;\n}\n\n@media (min-width: 62em) {\n  .fr-consent-manager__header .fr-consent-service__radios {\n    width: 56%;\n    position: absolute;\n    justify-content: flex-end;\n  }\n}\n\n@media (min-width: 78em) {\n  .fr-consent-manager__header .fr-consent-service__radios {\n    width: 50%;\n  }\n}\n\n.fr-consent-manager__buttons {\n  margin-bottom: -3rem;\n  margin-top: 1rem;\n}\n\n.fr-consent-manager .fr-consent-service:last-of-type {\n  box-shadow: none;\n}\n\n.fr-consent-placeholder {\n  --blend: var(--background-contrast-grey-blend);\n  background-color: var(--background-contrast-grey);\n}\n\n.fr-consent-banner {\n  --blend: var(--background-contrast-grey-blend);\n  background-color: var(--background-contrast-grey);\n  box-shadow: inset 0 0 0 1px var(--border-default-grey);\n}\n\n.fr-consent-manager__header,\n.fr-consent-service {\n  box-shadow: inset 0 -1px 0 0 var(--border-default-grey);\n  color: var(--text-default-grey);\n}\n\n.fr-consent-manager__header .fr-radio-group + .fr-radio-group::before,\n.fr-consent-service .fr-radio-group + .fr-radio-group::before {\n  box-shadow: inset 0 0 0 1px var(--border-default-grey);\n}\n",null,"////\n/// Placeholder Module\n/// @group consent\n////\n\n#{ns(consent-placeholder)} {\n  @include display-flex(column,center,center);\n  @include padding(20v 8v);\n  text-align: center;\n  @include set-text-margin(0 0 6v);\n  @include set-title-margin(0 0 2v);\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $part, $decisions, $legacy: false, $important: false, $value: $COLOR, $hover: false) {\n  $result: str-replace($value, '$COLOR', '$color#1');\n  $length: length($decisions) / 2;\n  @for $i from 1 through $length {\n    $token: nth($decisions, $i * 2 - 1);\n    $tint: nth($decisions, $i * 2);\n    @if $tint == accent {\n      $tint: $ACCENT;\n    }\n    $needle: '$color#1';\n    @if length($decisions) > 2 {\n      $needle: '$color##{$i}';\n    }\n    $part-token: _get-part-token($part, $token);\n    $p: map-get($part-token, part);\n    $token: map-get($part-token, token);\n\n    @if $tint == neutral {\n      $tint: _get-neutral-tint($p, $token);\n    }\n    $color: _get-value($p, $token, $tint, $legacy);\n    $result: _replace_color($result, $color, $needle);\n\n    @if $important {\n      $result: #{$result} !important;\n    }\n\n    @if $hover and $part == background and $p == background and $legacy == false {\n      $blend: var(#{_get-decision-prop($part, $token, $tint)}-blend);\n      @if $important {\n        $blend: #{$blend} !important;\n      }\n\n      --blend: #{$blend};\n    }\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(background-color, background, $decisions, $legacy, $important, $COLOR, true);\n}\n\n@mixin scheme-element-bg-transparent($legacy: false, $hover: false) {\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($decisions, $legacy: false, $important: false, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: length($decisions) / 2;\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-text-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(color, text, $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-fill-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(fill, background , $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de border\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n@mixin scheme-element-border-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR, $side:null) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($prop, border, $decisions, $legacy, $important, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($decisions, $legacy: false, $important: false, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: length($decisions) / 2;\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $decisions, $legacy, $important, space($value));\n}\n\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Function : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if type-of($value) == list {\n    $list: ();\n    $separator: list-separator($value);\n    @each $v in $value {\n      $list: append($list, space($v), $separator);\n    }\n    @return $list;\n  }\n  @if type-of($value) == string {\n    $c: str-index($value, '(');\n    @if $c {\n      $b: null;\n      $n: 0;\n      $i: $c + 1;\n      $l: str-length($value);\n      @while $b == null and $i <= $l {\n        $char: str-slice($value, $i, $i);\n        @if $char == '(' {\n          $n: $n + 1;\n        }\n        @else if $char == ')' {\n          @if $n > 0 {\n            $n: $n - 1;\n          }\n          @else {\n            $b: $i;\n          }\n        }\n        $i: $i + 1;\n      }\n\n      $start: unquote('');\n      $middle: space(str-slice($value, $c + 1, $b - 1));\n      $end: unquote('');\n\n      @if $c > 1 {\n        $start: space(str-slice($value, 1, $c - 1));\n      }\n\n      $l: str-length($value);\n      @if $b < $l {\n        $end: space(str-slice($value, $b + 1, $l));\n      }\n\n      @return unquote('#{$start}(#{$middle})#{$end}');\n    }\n\n    @if str-index($value, ',') {\n      @return space(str-split($value, ','));\n    }\n\n    @if str-index($value, ' ') {\n      @return space(str-split($value, ' '));\n    }\n\n    $value: unquote($value);\n  }\n\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $v: quote($value);\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return $value;\n}\n","////\n/// Placeholder Module\n/// @group consent\n////\n\n#{ns(consent-banner)} {\n  @include fixed(null, null, 0, 0, 100%);\n  max-height: calc(100% - #{space(32v)});\n  @include padding(4v);\n  @include z-index(consent);\n  overflow: auto;\n  @include set-text-margin(0 0 4v);\n  @include set-title-margin(0 0 4v);\n\n  @include respond-from(md) {\n    @include padding(8v);\n    bottom: space(10v);\n    left: space(10v);\n    max-width: space(160v);\n    max-height: calc(100% - #{space(20v)});\n  }\n\n  &__title {\n    @include title-style(h6);\n    @include margin-bottom(4v);\n  }\n\n  &__buttons {\n    @include margin-top(6v);\n    @include margin-top(8v, md);\n    @include margin-bottom(-4v);\n  }\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tool : Spacing z-index\n/// @group core\n////\n\n/// Fonction de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@function z-index($index-name) {\n  @return map-get($z-indexes, $index-name);\n}\n\n/// Mixin de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@mixin z-index($index-name, $focus: false) {\n  z-index: z-index($index-name);\n  @if $focus {\n    $focus-z-index: z-index($index-name + '-focus');\n\n    @if $focus-z-index != null {\n      *:focus,\n      *:focus-visible {\n        z-index: #{$focus-z-index};\n      }\n    }\n  }\n}\n","////\n/// services Module\n/// @group consent\n////\n\n/**\n* Consent service correspond à un bloc de finalité (titre, radios, description)\n**/\n#{ns(consent-service)} {\n  @include relative;\n\n  > #{ns(fieldset)} {\n    @include padding(0 0 5v);\n    @include padding(0 0 5v, md);\n    @include display-flex(column);\n    @include size(100%);\n    position: initial;\n\n    @include respond-from(md) {\n      @include display-flex(row,null,null,wrap);\n    }\n  }\n\n  &:last-child {\n    > #{ns(fieldset)} {\n      @include padding(8v 0 4v);\n      @include padding(5v 0 4v, md);\n\n      #{ns(consent-service)} > #{ns(fieldset)}:last-child {\n        @include margin-bottom(0);\n      }\n    }\n  }\n\n  /**\n  * Nom du service\n  **/\n  &__title {\n    @include title-style(h6);\n    @include padding(8v 0 3v);\n    @include margin(0);\n\n    @include respond-from(md) {\n      @include size(50%);\n    }\n  }\n\n  /**\n  * Description du service\n  **/\n  &__desc {\n    @include text-style(sm);\n    @include margin-bottom(3v);\n    @include margin-top(3v);\n    @include margin-top(1v,md);\n    @include margin-right(6v,md);\n    @include respond-from(md) {\n      @include size(60%);\n    }\n  }\n\n  /**\n  * Bloc dépliable, contient des sous services\n  **/\n  &__collapse {\n    @include margin-top(-1v);\n    @include margin-bottom(3v);\n    @include size(100%);\n\n    @include _nest-link($collapse-btn-settings, sm, right, arrow-down-s-line) {\n      background: transparent;\n      @include padding(0);\n      color: inherit;\n\n      &[aria-expanded=\"true\"] {\n        @include icon(arrow-up-s-line, sm);\n      }\n    }\n\n    /**\n    * Bouton d'ouverture/fermeture du collapse\n    **/\n    &-btn {\n      @include display-flex(row, center, null, null, true);\n      position: relative;\n\n      @include disable-blend;\n\n      @include after('','block') {\n        @include absolute(0,0,0,0,calc(100% - #{space(4v)}),calc(100% - #{space(1v)}));\n        @include link-underline;\n      }\n    }\n  }\n\n  /**\n  * Conteneur des radio-group\n  **/\n  &__radios {\n    // @include margin-bottom(3v);\n    @include display-flex(row, null, null, wrap);\n\n    @include respond-from(md) {\n      @include display-flex(row,center,flex-end);\n      @include margin-bottom(0);\n      @include absolute(5v, 0);\n      @include size(50%);\n    }\n  }\n\n  /**\n  * Groupe de radios avec séparateur\n  **/\n  #{ns-group(radio)} {\n    position: relative;\n\n    &:not(:last-child) input[type=\"radio\"] + label {\n      @include margin-right(12v);\n    }\n\n    &:not(:first-child) {\n      @include before('','block') {\n        @include size(1px, 6v);\n        @include absolute;\n        left: calc(#{space(-6v)} - 1px);\n        top: space(3v);\n      }\n    }\n  }\n}\n\n/**\n* fr-consent-services contient les sous services\n**/\n#{ns(consent-services)} {\n  @include margin-top(2v);\n  @include margin-bottom(-2v);\n  @include size(100%);\n\n  #{ns(consent-service)} {\n    &,\n    &:last-child {\n      @include scheme-element-no-box-shadow;\n      > #{ns(fieldset)} {\n        @include padding(0);\n      }\n    }\n\n    &:last-child {\n      > #{ns(fieldset)} {\n        @include margin-bottom(5v);\n      }\n    }\n\n    & + #{ns(consent-service)} {\n      @include margin-top(-1v, md);\n    }\n\n    &__title {\n      @include padding-top(3v);\n    }\n\n    &__radios {\n      top: 0;\n    }\n\n    &__desc {\n      @include margin-bottom(3v);\n      @include margin-bottom(1v,md);\n      @include margin-top(1v);\n    }\n  }\n}\n","////\n/// Core Tool : Selector nest\n/// @group core\n////\n\n@mixin nest($selector: null) {\n  @if $selector {\n    #{$selector} {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Link Tool : icons\n/// @group link\n////\n\n@mixin _build-link-icon($size-settings, $place, $size:md, $font-icon: false, $reverse: false) {\n\n  $icon-size: icon-size(map_get($size-settings, icon));\n\n  @if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n  }\n\n  @if $reverse {\n    flex-direction: row-reverse;\n  }\n  @else {\n    flex-direction: row;\n  }\n\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n  $icon-margin-x: space(map_get($size-settings, icon-margin-x));\n\n  @if $place == left {\n    overflow: initial;\n    max-width: none;\n    max-height: none;\n    @include before {\n      margin-left: -($icon-margin);\n      margin-right: $icon-margin-x;\n      font-size: $icon-size;\n    }\n  }\n  @else if $place == right {\n    overflow: initial;\n    max-width: none;\n    max-height: none;\n    @include before {\n      margin-right: -($icon-margin);\n      margin-left: $icon-margin-x;\n      font-size: $icon-size;\n    }\n  }\n  @else if $place == only {\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    overflow: hidden;\n    white-space: nowrap;\n    max-width: $min-height;\n    max-height: $min-height;\n    padding-left: $padding-x;\n    padding-right: $padding-x;\n\n    @include before {\n      margin-left: 0;\n      margin-right: $padding-x;\n      font-size: $icon-size;\n    }\n  }\n}\n","////\n/// Link Tool : sizes\n/// @group link\n////\n\n@mixin _build-link-size($size-settings, $border-radius: false) {\n  $font-size: map_get($size-settings, font-size);\n  $style: get-text-style($font-size);\n  $line-height: space(map_get($style, line-height));\n  font-size: px-rem($font-size);\n  line-height: $line-height;\n\n  $min-height: space(map_get($size-settings, min-height));\n  min-height: $min-height;\n\n  $max-icon-height: icon-size(md);\n\n  @if map_has_key($size-settings, icon-only) {\n    $max-icon-height: icon-size(map_get($size-settings, icon-only));\n  }\n  @else if map_has_key($size-settings, icon) {\n    $max-icon-height: icon-size(map_get($size-settings, icon));\n  }\n\n  $space-y: max($line-height, $max-icon-height);\n  $padding-x: space(map_get($size-settings, padding-x));\n\n  padding: #{($min-height - $space-y) / 2} #{$padding-x};\n\n  @if $border-radius {\n    border-radius: #{$min-height / 2};\n  }\n}\n\n@function _link-icon-margin($size) {\n  @return icon-size($size) / 4;\n}\n\n@mixin _link-align-on-content($size, $place, $size-settings) {\n  $padding-x: space(map_get($size-settings, padding-x));\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n\n  @if $place == null {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n  @else if $place == left {\n    margin-left: -($padding-x - $icon-margin);\n    margin-right: -($padding-x);\n  }\n  @else if $place == right {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x - $icon-margin);\n  }\n  @else if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n}\n","////\n/// Core Function : units\n/// @group core\n////\n\n/// Retourne la valeur numérique sans unité.\n/// @access public\n/// @param {String} $value - la valeur avec unité\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","$collapse-btn-settings:(\n  selector: 'consent-service__collapse-btn',\n  sizes: (\n    sm: (\n      font-size: 14,\n      min-height: 0,\n      padding-x: 0,\n      padding-y: 0,\n      icon: sm,\n      icon-margin-x: 1v\n    )\n  ),\n  places: right\n);\n","////\n/// Core Tool : Icon\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin icon-size($size:md) {\n  font-size: #{icon-size($size)} !important;\n}\n\n@mixin with-icon($size:md) {\n  @include has-icon {\n    @include before {\n      @if $size != md {\n        @include icon-size($size);\n      }\n      @content;\n    }\n  }\n}\n\n@mixin generate-icons($base) {\n  @each $icon, $settings in $icons-settings {\n    #{ns($base + '-' + $icon)} {\n      @include before(icon-glyph($icon));\n    }\n  }\n}\n\n@function icon-glyph($icon, $is-ligature: false) {\n  $icon-settings: map-get($icons-settings, $icon);\n  @if $is-ligature {\n    @return \"#{map-get($icon-settings, ligature)}\";\n  }\n  @else {\n    @return \"#{map-get($icon-settings, codepoint)}\";\n  }\n}\n\n@mixin icon-content($icon) {\n  content: icon-glyph($icon);\n}\n\n@function font-icon($size: md) {\n  @return normal normal normal #{icon-size($size)}/1 #{$namespace}-icon;\n}\n\n@mixin font-icon($size: md) {\n  font: font-icon($size);\n}\n\n@mixin icon($icon:null, $size:md, $pseudo:before) {\n  @include _pseudo($pseudo) {\n    @if $size != null {\n      @include font-icon($size);\n    }\n\n    @if $icon != null {\n      @include icon-content($icon);\n    }\n\n    @content;\n  }\n}\n","////\n/// Core Tool : Action Hover\n/// @group core\n////\n\n@mixin hover-media-query () {\n  @media (hover: hover) and (pointer: fine) {\n    @content;\n  }\n}\n\n@mixin hover-type-selector($elements, $type: all) {\n  $selectors: ();\n\n  @each $element, $setting in $elements {\n    $hover: map-get($setting, hover);\n    $selector: map-get($setting, selector);\n    @if $hover {\n      @if $type == map-get($hover, type) or $type == all {\n        $nested: nest($selector, map-get($hover, selector));\n        $associated: $nested;\n        @if & != null and quote(&) != ':root' {\n          $associated: selector-associate(quote(&), $nested);\n        }\n        $selectors: append($selectors, $associated, 'comma');\n      }\n    }\n  }\n\n  @at-root #{$selectors} {\n    @content;\n  }\n}\n\n@mixin hover-blend($background-images: (), $background-sizes: (), $background-positions: ()) {\n  --hsla: #{css-hsl-alpha(var(--blend), var(--a))};\n  --blend-size: 0%; // 2048px 2048px;\n  --blend-position: 50%;\n  @include hover-blend-background($background-images, $background-sizes, $background-positions);\n\n  &:hover,\n  &:active {\n    --blend-size: var(--blend-full-size); // 2048px 2048px;\n  }\n\n  &:hover {\n    --a: #{$hover-alpha};\n  }\n\n  &:active {\n    --a: #{$active-alpha};\n  }\n}\n\n@mixin hover-blend-background($background-images: (), $background-sizes: (), $background-positions: ()) {\n  background-repeat: no-repeat;\n  background-size: append($background-sizes, var(--blend-size));\n  background-position: append($background-positions, var(--blend-position));\n  background-image: append($background-images, radial-gradient(circle at center, var(--hsla), var(--hsla) 3%));\n}\n\n@mixin enable-blend() {\n  --blend-full-size: 100%;\n}\n\n@mixin disable-blend() {\n  --blend-full-size: 0;\n}\n","////\n/// Core Tool : Reset\n/// @group core\n////\n\n@mixin a-reset {\n  text-decoration: none;\n  color: inherit;\n}\n\n@mixin enable-link-style() {\n  --link-underline: 0 1px 0 0 currentColor;\n  --link-blank-font: #{font-icon(sm)};\n  --link-blank-content: \"\\00a0#{icon-glyph(external-link-line)}\";\n}\n\n@mixin disable-link-style() {\n  --link-underline: none;\n  --link-blank-font: none;\n  --link-blank-content: none;\n}\n\n@mixin link-underline() {\n  box-shadow: var(--link-underline);\n}\n\n@mixin link-blank() {\n  @include after(var(--link-blank-content)) {\n    font: var(--link-blank-font);\n  }\n}\n","////\n/// Manager Module\n/// @group consent\n////\n\n#{ns(consent-manager)} {\n  &__header {\n    @include padding-top(0);\n\n    #{ns(consent-service)}__title {\n      width: 100%;\n      @include padding(0 0 3v 0);\n      @include text-style(md);\n      @include font-weight(regular);\n\n      @include respond-from(lg) {\n        width: 44%;\n      }\n\n      @include respond-from(xl) {\n        width: 50%;\n      }\n    }\n\n    #{ns(consent-service)}__radios {\n      width: 100%;\n      justify-content: flex-start;\n      top: 0;\n      position: initial;\n\n      @include respond-from(lg) {\n        width: 56%;\n        position: absolute;\n        justify-content: flex-end;\n      }\n\n      @include respond-from(xl) {\n        width: 50%;\n      }\n    }\n  }\n\n  &__buttons {\n    @include margin-bottom(-12v);\n    @include margin-top(4v);\n  }\n\n  #{ns(consent-service)}:last-of-type {\n    @include scheme-element-no-box-shadow;\n  }\n}\n","////\n/// Core Tool : Typography font-weight\n/// @group core\n////\n\n/// Return font-weight value from font-weight map.\n///\n/// @param {String} $scale [\"regular\"] - Type scale value from `$weight-scale` (Default to \"regular\" = 400)\n///\n/// @example scss - Set font-weight to bold (700)\n///   .foo {\n///     font-weight: font-weight(\"bold\");\n///   }\n\n@function font-weight($scale: regular) {\n  @return map-get($font-weight-scale, $scale);\n}\n\n@mixin font-weight($scale) {\n  font-weight: font-weight($scale);\n}\n\n@mixin font-weights() {\n  @each $name, $weight in $font-weight-scale {\n    & #{ns('text--' + $name)} {\n      font-weight: #{$weight} !important;\n    }\n  }\n}\n","////\n/// Core Setting : Typography font-weight\n/// @group core\n////\n\n$font-weight-scale: (\n  light: 300,\n  regular: 400,\n  bold: 700,\n  xx-bold: 900\n);\n","////\n/// Consent Scheme\n/// @group consent\n////\n\n@mixin _consent-scheme($legacy: false) {\n  #{ns(consent-placeholder)} {\n    @include scheme-element-bg-color(contrast grey, $legacy);\n  }\n\n  #{ns(consent-banner)} {\n    @include scheme-element-bg-color(contrast grey, $legacy);\n    @include scheme-element-box-shadow-color(default grey, $legacy);\n  }\n\n  #{ns(consent-manager__header)},\n  #{ns(consent-service)} {\n    @include scheme-element-box-shadow-color(default grey, $legacy, false, bottom-1-in);\n    @include scheme-element-text-color(default grey, $legacy);\n\n    #{ns-group(radio)} {\n      + #{ns-group(radio)} {\n        @include before {\n          @include scheme-element-box-shadow-color(default grey, $legacy);\n        }\n      }\n    }\n  }\n}\n","////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n"]}