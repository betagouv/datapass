{"version":3,"sources":["<no source>","../../../input.legacy.css","../../../../../../src/component/input/style/_tool.scss","../../../../../../src/component/input/style/_scheme.scss","../../../../../../src/legacy/style/tool/_legacy.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/core/style/color/tool/_disabled.scss","../../../../../../src/core/style/selector/tool/_autofill.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;ACKhB,sBAAA;ACCE;EAKE;;KFNC;EEaD;;KFVC;EEeD;;KFZC;EEmBD;;KFhBC;EEuBD;;;KFnBC;AACL;AGLI;EDRF;IEwCI,cAAU;IAAV,sBAAU;IAAV,oCAAU;EJtBd;ECPA;IG6BI,WAAU;EJJd;ECxBA;IG4BI,WAAU;EJEd;EC7BA;IG2BI,WAAU;EJQd;EClCA;IG0BI,WAAU;EJcd;EKhCQ;IDkBJ,cAAU;IAAV,oCAAU;EJoBd;EExCE;IEoBE,oCAAU;EJgCd;EE7CE;IEaE,oCAAU;EJsCd;EM9EA;IFwCI,gEAAU;IAAV,gCAAU;EJ4Cd;EE3CA;IEDI,oCAAU;EJwDd;AA7EF","file":"input.legacy.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* stylelint-disable */\n.fr-input {\n  /**\n    * Style du placeholder\n    */\n  /**\n    * Style pour l'état désactivé\n    */\n  /**\n    * Modificateur pour les champs validés\n    */\n  /**\n    * Modificateur pour les champs présentant des erreurs\n    */\n  /**\n    * On applique un style lorsque la valeur est automatiquement remplie par le navigateur\n    * sur les navigateurs webkit.\n    */\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input {\n    color: #161616;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input {\n    background-color: #eee;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input {\n    box-shadow: inset 0 -2px 0 0 #3a3a3a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input::-webkit-input-placeholder {\n    color: #666;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:-moz-placeholder {\n    color: #666;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input::-moz-placeholder {\n    color: #666;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:-ms-input-placeholder {\n    color: #666;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:disabled, .fr-input[disabled] {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:disabled, .fr-input[disabled] {\n    box-shadow: inset 0 -2px 0 0 #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input--valid {\n    box-shadow: inset 0 -2px 0 0 #18753c;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input--error {\n    box-shadow: inset 0 -2px 0 0 #ce0500;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:autofill, .fr-input:autofill:hover, .fr-input:autofill:focus, .fr-input:-webkit-autofill, .fr-input:-webkit-autofill:hover, .fr-input:-webkit-autofill:focus {\n    box-shadow: inset 0 -2px 0 0 #3a3a3a, inset 0 0 0 1000px #e8edff;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:autofill, .fr-input:autofill:hover, .fr-input:autofill:focus, .fr-input:-webkit-autofill, .fr-input:-webkit-autofill:hover, .fr-input:-webkit-autofill:focus {\n    -webkit-text-fill-color: #161616;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input-wrap > *:not(:last-child).fr-input:not(.fr-input--valid):not(.fr-input--error) {\n    box-shadow: inset 0 -2px 0 0 #000091;\n  }\n}\n","////\n/// Input Tool\n/// @group input\n////\n\n/* stylelint-disable */\n/// Mixin pour ajouter les préfixes vendor du placeholder\n///\n/// @access public\n///\n/// @example scss\n///   .foo {\n///     @include placeholder {\n///       @content;\n///     }\n///   }\n@mixin placeholder {\n  &::-webkit-input-placeholder {@content;}\n  &:-moz-placeholder           {@content;}\n  &::-moz-placeholder          {@content;}\n  &:-ms-input-placeholder      {@content;}\n}\n","////\n/// Input Scheme\n/// @group input\n////\n\n@mixin _input-scheme($legacy: false) {\n  #{ns(input)} {\n    @include scheme-element-text-color(label neutral, $legacy);\n    @include scheme-element-bg-color(contrast neutral, $legacy);\n    @include scheme-element-box-shadow-color(plain neutral, $legacy, false, bottom-2-in);\n\n    /**\n    * Style du placeholder\n    */\n    @include placeholder {\n      @include scheme-element-text-color(mention neutral, $legacy);\n    }\n\n    /**\n    * Style pour l'état désactivé\n    */\n    @include disabled-form-field($legacy);\n\n    /**\n    * Modificateur pour les champs validés\n    */\n    &--valid {\n      @include scheme-element-box-shadow-color(plain success, $legacy, false, bottom-2-in);\n    }\n\n    /**\n    * Modificateur pour les champs présentant des erreurs\n    */\n    &--error {\n      @include scheme-element-box-shadow-color(plain error, $legacy, false, bottom-2-in);\n    }\n\n    /**\n    * On applique un style lorsque la valeur est automatiquement remplie par le navigateur\n    * sur les navigateurs webkit.\n    */\n    @include autofill {\n      @include scheme-element-box-shadow-color(plain neutral background-contrast info, $legacy, false, bottom-2-in all-in);\n      @include _scheme-element(-webkit-text-fill-color, text, label neutral, $legacy);\n    }\n  }\n\n  #{ns(input-wrap)} {\n    > *:not(:last-child) {\n      &#{ns(input)}:not(#{ns(input--valid)}):not(#{ns(input--error)}) {\n        @include scheme-element-box-shadow-color(action-high blue-france, $legacy, false, bottom-2-in);\n      }\n    }\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $part, $decisions, $legacy: false, $important: false, $value: $COLOR, $hover: false) {\n  $result: str-replace($value, '$COLOR', '$color#1');\n  $length: length($decisions) / 2;\n  @for $i from 1 through $length {\n    $token: nth($decisions, $i * 2 - 1);\n    $tint: nth($decisions, $i * 2);\n    @if $tint == accent {\n      $tint: $ACCENT;\n    }\n    $needle: '$color#1';\n    @if length($decisions) > 2 {\n      $needle: '$color##{$i}';\n    }\n    $part-token: _get-part-token($part, $token);\n    $p: map-get($part-token, part);\n    $token: map-get($part-token, token);\n\n    @if $tint == neutral {\n      $tint: _get-neutral-tint($p, $token);\n    }\n    $color: _get-value($p, $token, $tint, $legacy);\n    $result: _replace_color($result, $color, $needle);\n\n    @if $important {\n      $result: #{$result} !important;\n    }\n\n    @if $hover and $part == background and $p == background and $legacy == false {\n      $blend: var(#{_get-decision-prop($part, $token, $tint)}-blend);\n      @if $important {\n        $blend: #{$blend} !important;\n      }\n\n      --blend: #{$blend};\n    }\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(background-color, background, $decisions, $legacy, $important, $COLOR, true);\n}\n\n@mixin scheme-element-bg-transparent($legacy: false, $hover: false) {\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($decisions, $legacy: false, $important: false, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: length($decisions) / 2;\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-text-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(color, text, $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-fill-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(fill, background , $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de border\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n@mixin scheme-element-border-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR, $side:null) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($prop, border, $decisions, $legacy, $important, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($decisions, $legacy: false, $important: false, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: length($decisions) / 2;\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $decisions, $legacy, $important, space($value));\n}\n\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Color disabled\n/// @group core\n////\n\n@mixin disabled-colors($legacy:false, $text:true, $background:false, $box-shadow-border: false) {\n  @if $text {\n    @include scheme-element-text-color(disabled grey, $legacy);\n  }\n\n  @if $background {\n    @include scheme-element-bg-color(disabled grey, $legacy);\n  }\n\n  @if $box-shadow-border == true {\n    @include scheme-element-box-shadow-color(disabled grey, $legacy);\n  }\n  @else if $box-shadow-border != false {\n    @include scheme-element-box-shadow-color(disabled neutral, $legacy, false, $box-shadow-border);\n  }\n}\n\n@mixin disabled($legacy:false, $text:false, $background:false, $box-shadow-border: false, $can-be-link: false) {\n  $selectors: '&:disabled, &[disabled]';\n  @if $can-be-link {\n    $selectors: append($selectors, selector-associate(&, 'a:not([href])'), comma);\n  }\n\n  @at-root #{$selectors} {\n    @include disabled-colors($legacy, $text, $background, $box-shadow-border);\n    @content;\n  }\n}\n","////\n/// Core Tool : Selector Autofill\n/// @group core\n////\n\n@mixin autofill () {\n  &:autofill,\n  &:autofill:hover,\n  &:autofill:focus,\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus {\n    @content;\n  }\n}\n"]}