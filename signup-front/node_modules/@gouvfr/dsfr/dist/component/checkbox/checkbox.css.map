{"version":3,"sources":["<no source>","../../../checkbox.css","../../../../../../src/component/checkbox/main.scss","../../../../../../src/component/checkbox/style/_module.scss","../../../../../../src/core/style/spacing/tool/_position.scss","../../../../../../src/component/checkbox/style/_scheme.scss","../../../../../../src/core/style/spacing/tool/_space.scss","../../../../../../src/core/style/display/tool/_display.scss","../../../../../../src/core/style/spacing/function/_space.scss","../../../../../../src/core/style/spacing/tool/_size.scss","../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../src/core/style/icon/_tool.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/legacy/style/tool/_legacy.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACKhB;;yCDFyC;;AEEzC;;;EFEE;AEEF;ECHE,kBAAU;;EDMV;;IFAE;;EEyCF;;IFtCE;;EE6CF;;IF1CE;;EEiDF;;IF9CE;;EEsDF;;IFnDE;;EEkEF;;IF/DE;;EEwEF;;IFrEE;EInBA;;KJoHC;;EIxED;;KJ2EC;;EI9DD;;KJiEC;EI1HD;;KJ8KC;;EIlID;;KJqIC;;EIxHD;;KJ2HC;AAhKL;;AEtBA;ECHE,kBAAU;EDWR,UAAU;;EAEV;;MFmBE;EIjBA;;;OJuHC;;EIzGD;;OJ4GC;EI1HD;;;OJiLC;;EInKD;;OJsKC;AAlKP;;AE9BA;ECHE,kBAAU;EEyBR,kBHPuB;EACrB,wCAAwC;EId1C,aAAa;EAIb,mBAAgB;EAIhB,mBAAa;EAIb,2BAAiB;EAIjB,eAAW;EDAT,iBEmEkB;;ELjElB;;OFwBC;;EEhBD;;OFmBC;AACP;;AEhDA;EGsBI,SHEqB;EMuBnB,WAAO;ARMb;;AS9CE;EC2CA,2CAJ0E;EAJ1E,YALU;EJnCR,aAAa;EAIb,mBAAgB;EAIhB,mBAAa;EAIb,uBAAiB;EHjBnB,kBAAU;EAER,MAAK;EASL,WAAM;EEUJ,mBEmEkB;ECtClB,aAAO;EAGP,cAAQ;EHhCR,oBEmEkB;ELhDhB,kBAAkB;EAClB,sBK+CgB;EI5CpB,0DAAU;AX8Bd;;AEvEA;EGkBM,oBEmEkB;APVxB;;AE3EA;EGkBM,uBEmEkB;APNxB;;AE/EA;;EGkBM,mBEmEkB;APDxB;;AS7EE;EDwCI,WAAO;EAGP,YAAQ;EHhCR,gBEmEkB;ELVd,cAAM;AFgBhB;;ASpFE;EAGI,WP2EgB;ECxFpB,kBAAU;EAER,YAAK;EASL,aAAM;EKuCJ,UAAO;EAGP,cAAQ;EGTV,qDAAU;AX2Dd;;AS7FE;EAGI,WPoFgB;ECjGpB,kBAAU;EAER,YAAK;EASL,aAAM;EKuCJ,UAAO;EAGP,cAAQ;EGTV,uDAAU;AXoEd;;AIjHA;;;EJsHE;;AS3GA;;EEwBI,mDAAQ;EAUV,sDAAU;EAAV,gCAAU;AXwGd;;AS1IE;;EEkCE,uDAAU;AX4Gd;;AS9IE;;EEkCE,gCAAU;;EAVR,8CAAQ;EAUV,iDAAU;AXkHd;;AI1GK;EORD,gCAAU;AXsHd;;AIjGK;EOrBD,kCAAU;AX8Hd;;AYlKI;EHEF;IE8BI,mCAAU;EXiKd;;ES/LA;;IE8BI,yBAAU;IAAV,WAAU;EXuKd;;ESrMA;;IE8BI,mCAAU;EXmLd;;ESjNA;;IE8BI,cAAU;IAAV,yBAAU;EXyLd;;EI7KG;IOZC,cAAU;EXqMd;;ESnOA;IE8BI,mCAAU;EX2Md;;EIlLG;IOzBC,cAAU;EXiNd;;ES/OA;IE8BI,mCAAU;EXuNd;AArDF","file":"checkbox.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  CHECKBOX\n\\* ------------------------------------ */\n/**\n * L'input de type checkbox avec son label est contenu dans un groupe\n * Ce groupe contient également les textes de validation, d'erreur et d'aide (optionnels)\n */\n.fr-checkbox-group {\n  position: relative;\n  /**\n   * On cache l'input de type checkbox pour le styler via le label\n   */\n  /**\n   * Dans le cas d'un fieldset, on supprime l'espacement du premier groupe\n   */\n  /**\n   * Dans le cas d'un fieldset, on supprime l'espacement du dernier groupe\n   */\n  /**\n   * Texte de validation et d'erreur\n   */\n  /**\n   * Modificateur de taille sm\n   */\n  /**\n   * Modificateur pour gérer l'état erreur\n   */\n  /**\n   * Modificateur pour gérer l'état validé\n   */\n}\n\n.fr-checkbox-group input[type=\"checkbox\"] {\n  position: absolute;\n  opacity: 0;\n  /**\n     * On applique un display grid sur le label afin de gérer le positionnement des élements\n     */\n}\n\n.fr-checkbox-group input[type=\"checkbox\"] + label {\n  position: relative;\n  padding: 0.75rem 0;\n  -webkit-tap-highlight-color: transparent;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  margin-left: 2rem;\n  /**\n      * Style du texte d'aide dans le label\n      */\n  /**\n      * On ajoute l'icône check-line en taille sm via un pseudo element before\n      */\n}\n\n.fr-checkbox-group input[type=\"checkbox\"] + label .fr-hint-text {\n  margin: 0;\n  width: 100%;\n}\n\n.fr-checkbox-group input[type=\"checkbox\"] + label::before {\n  font: normal normal normal 1rem/1 dsfr-icon;\n  content: \"\";\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  left: -2rem;\n  margin-top: 0.75rem;\n  width: 1.5rem;\n  height: 1.5rem;\n  margin-right: 0.5rem;\n  color: transparent;\n  border-radius: 0.25rem;\n}\n\n.fr-checkbox-group:first-child {\n  margin-top: -0.75rem;\n}\n\n.fr-checkbox-group:last-child {\n  margin-bottom: -0.75rem;\n}\n\n.fr-checkbox-group .fr-error-text,\n.fr-checkbox-group .fr-valid-text {\n  margin-top: 0.25rem;\n}\n\n.fr-checkbox-group--sm input[type=\"checkbox\"] + label::before {\n  width: 1rem;\n  height: 1rem;\n  margin-top: 1rem;\n  left: -1.75rem;\n}\n\n.fr-checkbox-group--error::before {\n  content: \"\";\n  position: absolute;\n  top: 0.75rem;\n  left: -0.5rem;\n  width: 2px;\n  height: 1.5rem;\n}\n\n.fr-checkbox-group--valid::before {\n  content: \"\";\n  position: absolute;\n  top: 0.75rem;\n  left: -0.5rem;\n  width: 2px;\n  height: 1.5rem;\n}\n\n/**\n * L'input de type checkbox avec son label est contenu dans un groupe\n * Ce groupe contient également les textes de validation, d'erreur et d'aide (optionnels)\n */\n.fr-checkbox-group {\n  /**\n    * On cache l'input de type checkbox pour le styler via le label\n    */\n  /**\n    * Modificateur pour gérer l'état erreur\n    */\n  /**\n    * Modificateur pour gérer l'état validé\n    */\n}\n\n.fr-checkbox-group input[type=\"checkbox\"] {\n  /**\n      * On applique les styles au pseudo élément before du label quand l'input présente\n      * un état check ou active\n      */\n  /**\n      * Mixins pour appliquer les styles correspondant au focus ainsi qu'à l'état disabled\n      */\n}\n\n.fr-checkbox-group input[type=\"checkbox\"] + label::before {\n  box-shadow: inset 0 0 0 1px var(--border-action-high-grey);\n}\n\n.fr-checkbox-group input[type=\"checkbox\"]:checked + label::before, .fr-checkbox-group input[type=\"checkbox\"]:active:not(:disabled) + label::before {\n  --blend: var(--background-active-blue-france-blend);\n  background-color: var(--background-active-blue-france);\n  color: var(--text-inverted-grey);\n}\n\n.fr-checkbox-group input[type=\"checkbox\"]:disabled + label::before, .fr-checkbox-group input[type=\"checkbox\"][disabled] + label::before {\n  box-shadow: inset 0 0 0 1px var(--border-disabled-grey);\n}\n\n.fr-checkbox-group input[type=\"checkbox\"]:disabled:checked + label::before, .fr-checkbox-group input[type=\"checkbox\"][disabled]:checked + label::before {\n  color: var(--text-disabled-grey);\n  --blend: var(--background-disabled-grey-blend);\n  background-color: var(--background-disabled-grey);\n}\n\n.fr-checkbox-group--error input[type=\"checkbox\"] + label {\n  color: var(--text-default-error);\n}\n\n.fr-checkbox-group--error::before {\n  box-shadow: inset 2px 0 0 0 var(--border-plain-error);\n}\n\n.fr-checkbox-group--valid input[type=\"checkbox\"] + label {\n  color: var(--text-default-success);\n}\n\n.fr-checkbox-group--valid::before {\n  box-shadow: inset 2px 0 0 0 var(--border-plain-success);\n}\n\n.fr-checkbox-group {\n  /**\n    * On cache l'input de type checkbox pour le styler via le label\n    */\n  /**\n    * Modificateur pour gérer l'état erreur\n    */\n  /**\n    * Modificateur pour gérer l'état validé\n    */\n}\n\n.fr-checkbox-group input[type=\"checkbox\"] {\n  /**\n      * On applique les styles au pseudo élément before du label quand l'input présente\n      * un état check ou active\n      */\n  /**\n      * Mixins pour appliquer les styles correspondant au focus ainsi qu'à l'état disabled\n      */\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"] + label::before {\n    box-shadow: inset 0 0 0 1px #161616;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"]:checked + label::before, .fr-checkbox-group input[type=\"checkbox\"]:active:not(:disabled) + label::before {\n    background-color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"]:checked + label::before, .fr-checkbox-group input[type=\"checkbox\"]:active:not(:disabled) + label::before {\n    color: #fff;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"]:disabled + label::before, .fr-checkbox-group input[type=\"checkbox\"][disabled] + label::before {\n    box-shadow: inset 0 0 0 1px #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"]:disabled:checked + label::before, .fr-checkbox-group input[type=\"checkbox\"][disabled]:checked + label::before {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"]:disabled:checked + label::before, .fr-checkbox-group input[type=\"checkbox\"][disabled]:checked + label::before {\n    background-color: #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group--error input[type=\"checkbox\"] + label {\n    color: #ce0500;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group--error::before {\n    box-shadow: inset 2px 0 0 0 #ce0500;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group--valid input[type=\"checkbox\"] + label {\n    color: #18753c;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group--valid::before {\n    box-shadow: inset 2px 0 0 0 #18753c;\n  }\n}\n","////\n/// Checkbox Main\n/// @group checkbox\n////\n\n/* ------------------------------------ *\\\n  CHECKBOX\n\\* ------------------------------------ */\n\n@import 'index';\n@import 'style/module';\n@import 'style/scheme';\n\n@include _checkbox-scheme;\n","////\n/// Checkbox Module\n/// @group checkbox\n////\n\n/**\n * L'input de type checkbox avec son label est contenu dans un groupe\n * Ce groupe contient également les textes de validation, d'erreur et d'aide (optionnels)\n */\n#{ns(checkbox-group)} {\n  @include relative;\n\n  /**\n   * On cache l'input de type checkbox pour le styler via le label\n   */\n  input[type=\"checkbox\"] {\n    @include absolute;\n    opacity: 0;\n\n    /**\n     * On applique un display grid sur le label afin de gérer le positionnement des élements\n     */\n    + label {\n      @include relative;\n      @include padding(3v 0);\n      -webkit-tap-highlight-color: transparent;\n      @include display-flex(row, center, flex-start, wrap);\n      @include margin-left(8v);\n\n      /**\n      * Style du texte d'aide dans le label\n      */\n      #{ns(hint-text)} {\n        @include margin(0);\n        @include size(100%);\n      }\n\n      /**\n      * On ajoute l'icône check-line en taille sm via un pseudo element before\n      */\n      @include icon(check-line, sm, before) {\n        @include display-flex(row, center, center);\n        @include absolute(0, null, null, -8v);\n        @include margin-top(3v);\n        @include size(6v, 6v);\n        @include margin-right(2v);\n        color: transparent;\n        border-radius: space(1v);\n        // transition: background-color 0.1s, color 0.1s;\n      }\n    }\n  }\n\n  /**\n   * Dans le cas d'un fieldset, on supprime l'espacement du premier groupe\n   */\n  &:first-child {\n    @include margin-top(-3v);\n  }\n\n  /**\n   * Dans le cas d'un fieldset, on supprime l'espacement du dernier groupe\n   */\n  &:last-child {\n    @include margin-bottom(-3v);\n  }\n\n  /**\n   * Texte de validation et d'erreur\n   */\n  #{ns(error-text)},\n  #{ns(valid-text)} {\n    @include margin-top(1v);\n  }\n\n  /**\n   * Modificateur de taille sm\n   */\n  &--sm {\n    input[type=\"checkbox\"] {\n      + label {\n        @include before {\n          @include size(4v, 4v);\n          @include margin-top(4v);\n          left: #{space(-7v)};\n        }\n      }\n    }\n  }\n\n  /**\n   * Modificateur pour gérer l'état erreur\n   */\n  &--error {\n    @include before('') {\n      @include absolute(3v, null, null, -2v, 2px, 6v);\n    }\n  }\n\n  /**\n   * Modificateur pour gérer l'état validé\n   */\n  &--valid {\n    @include before('') {\n      @include absolute(3v, null, null, -2v, 2px, 6v);\n    }\n  }\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Checkbox Scheme\n/// @group checkboxe\n////\n\n/**\n * L'input de type checkbox avec son label est contenu dans un groupe\n * Ce groupe contient également les textes de validation, d'erreur et d'aide (optionnels)\n */\n@mixin _checkbox-scheme($legacy: false) {\n  #{ns(checkbox-group)} {\n    /**\n    * On cache l'input de type checkbox pour le styler via le label\n    */\n    input[type=\"checkbox\"] {\n      + label {\n        @include before {\n          @include scheme-element-box-shadow-color(action-high neutral, $legacy);\n        }\n      }\n\n      /**\n      * On applique les styles au pseudo élément before du label quand l'input présente\n      * un état check ou active\n      */\n      &:checked,\n      &:active:not(:disabled) {\n        + label {\n          @include before {\n            @include scheme-element-bg-color(active blue-france, $legacy);\n            @include scheme-element-text-color(inverted neutral, $legacy);\n          }\n        }\n      }\n\n      /**\n      * Mixins pour appliquer les styles correspondant au focus ainsi qu'à l'état disabled\n      */\n      @include disabled($legacy) {\n        & + label {\n          @include before {\n            @include disabled-colors($legacy, false, false, true);\n          }\n        }\n\n        &:checked {\n          & + label {\n            @include before {\n              @include disabled-colors($legacy, true, true);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n    * Modificateur pour gérer l'état erreur\n    */\n    &--error {\n      input[type=\"checkbox\"] + label {\n        @include scheme-element-text-color(default error, $legacy);\n      }\n\n      @include before {\n        @include scheme-element-box-shadow-color(plain error, $legacy, false, left-2-in);\n      }\n    }\n\n    /**\n    * Modificateur pour gérer l'état validé\n    */\n    &--valid {\n      input[type=\"checkbox\"] + label {\n        @include scheme-element-text-color(default success, $legacy);\n      }\n\n      @include before {\n        @include scheme-element-box-shadow-color(plain success, $legacy, false, left-2-in);\n      }\n    }\n  }\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Function : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if type-of($value) == list {\n    $list: ();\n    $separator: list-separator($value);\n    @each $v in $value {\n      $list: append($list, space($v), $separator);\n    }\n    @return $list;\n  }\n  @if type-of($value) == string {\n    $c: str-index($value, '(');\n    @if $c {\n      $b: null;\n      $n: 0;\n      $i: $c + 1;\n      $l: str-length($value);\n      @while $b == null and $i <= $l {\n        $char: str-slice($value, $i, $i);\n        @if $char == '(' {\n          $n: $n + 1;\n        }\n        @else if $char == ')' {\n          @if $n > 0 {\n            $n: $n - 1;\n          }\n          @else {\n            $b: $i;\n          }\n        }\n        $i: $i + 1;\n      }\n\n      $start: unquote('');\n      $middle: space(str-slice($value, $c + 1, $b - 1));\n      $end: unquote('');\n\n      @if $c > 1 {\n        $start: space(str-slice($value, 1, $c - 1));\n      }\n\n      $l: str-length($value);\n      @if $b < $l {\n        $end: space(str-slice($value, $b + 1, $l));\n      }\n\n      @return unquote('#{$start}(#{$middle})#{$end}');\n    }\n\n    @if str-index($value, ',') {\n      @return space(str-split($value, ','));\n    }\n\n    @if str-index($value, ' ') {\n      @return space(str-split($value, ' '));\n    }\n\n    $value: unquote($value);\n  }\n\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $v: quote($value);\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return $value;\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Icon\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin icon-size($size:md) {\n  font-size: #{icon-size($size)} !important;\n}\n\n@mixin with-icon($size:md) {\n  @include has-icon {\n    @include before {\n      @if $size != md {\n        @include icon-size($size);\n      }\n      @content;\n    }\n  }\n}\n\n@mixin generate-icons($base) {\n  @each $icon, $settings in $icons-settings {\n    #{ns($base + '-' + $icon)} {\n      @include before(icon-glyph($icon));\n    }\n  }\n}\n\n@function icon-glyph($icon, $is-ligature: false) {\n  $icon-settings: map-get($icons-settings, $icon);\n  @if $is-ligature {\n    @return \"#{map-get($icon-settings, ligature)}\";\n  }\n  @else {\n    @return \"#{map-get($icon-settings, codepoint)}\";\n  }\n}\n\n@mixin icon-content($icon) {\n  content: icon-glyph($icon);\n}\n\n@function font-icon($size: md) {\n  @return normal normal normal #{icon-size($size)}/1 #{$namespace}-icon;\n}\n\n@mixin font-icon($size: md) {\n  font: font-icon($size);\n}\n\n@mixin icon($icon:null, $size:md, $pseudo:before) {\n  @include _pseudo($pseudo) {\n    @if $size != null {\n      @include font-icon($size);\n    }\n\n    @if $icon != null {\n      @include icon-content($icon);\n    }\n\n    @content;\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $part, $decisions, $legacy: false, $important: false, $value: $COLOR, $hover: false) {\n  $result: str-replace($value, '$COLOR', '$color#1');\n  $length: length($decisions) / 2;\n  @for $i from 1 through $length {\n    $token: nth($decisions, $i * 2 - 1);\n    $tint: nth($decisions, $i * 2);\n    @if $tint == accent {\n      $tint: $ACCENT;\n    }\n    $needle: '$color#1';\n    @if length($decisions) > 2 {\n      $needle: '$color##{$i}';\n    }\n    $part-token: _get-part-token($part, $token);\n    $p: map-get($part-token, part);\n    $token: map-get($part-token, token);\n\n    @if $tint == neutral {\n      $tint: _get-neutral-tint($p, $token);\n    }\n    $color: _get-value($p, $token, $tint, $legacy);\n    $result: _replace_color($result, $color, $needle);\n\n    @if $important {\n      $result: #{$result} !important;\n    }\n\n    @if $hover and $part == background and $p == background and $legacy == false {\n      $blend: var(#{_get-decision-prop($part, $token, $tint)}-blend);\n      @if $important {\n        $blend: #{$blend} !important;\n      }\n\n      --blend: #{$blend};\n    }\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(background-color, background, $decisions, $legacy, $important, $COLOR, true);\n}\n\n@mixin scheme-element-bg-transparent($legacy: false, $hover: false) {\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($decisions, $legacy: false, $important: false, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: length($decisions) / 2;\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-text-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(color, text, $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-fill-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(fill, background , $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de border\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n@mixin scheme-element-border-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR, $side:null) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($prop, border, $decisions, $legacy, $important, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($decisions, $legacy: false, $important: false, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: length($decisions) / 2;\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $decisions, $legacy, $important, space($value));\n}\n\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n"]}