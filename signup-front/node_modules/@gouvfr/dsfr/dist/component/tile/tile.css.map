{"version":3,"sources":["<no source>","../../../tile.css","../../../../../../src/component/tile/main.scss","../../../../../../src/component/tile/style/_module.scss","../../../../../../src/core/style/spacing/tool/_position.scss","../../../../../../src/core/style/display/tool/_display.scss","../../../../../../src/core/style/typography/tool/_styles.scss","../../../../../../src/component/tile/style/module/_variations.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/core/style/spacing/tool/_size.scss","../../../../../../src/core/style/reset/tool/_link.scss","../../../../../../src/core/style/spacing/tool/_space.scss","../../../../../../src/core/style/selector/tool/_block.scss","../../../../../../src/core/style/spacing/function/_space.scss","../../../../../../src/core/style/typography/tool/_font-weight.scss","../../../../../../src/core/style/typography/setting/_font-weight.scss","../../../../../../src/component/tile/style/_scheme.scss","../../../../../../src/core/style/selector/tool/_breakpoint.scss","../../../../../../src/legacy/style/tool/_legacy.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACKhB;;yCDFyC;AEEzC;ECCE,kBAAU;ECKR,aAAa;EAIb,8BAAgB;;ECoFhB,iBAA6B;EAA7B,2BAA6B;;EHxF/B;;IFCE;;EEYF;;;;;IFNE;;EE2BF;;IFxBE;;EEmCF;;IFhCE;;EE6CF;;IF1CE;;EMtBJ;;GNyBG;;EMDH;;GNIG;;EM+BH;;GN5BG;EOIG,6CAAQ;EAUV,gDAAU;EAAV,4GAAU;APbd;;AEvBE;EM6CI,YAAQ;ARlBd;;AEvBE;EACE,oBAAoB;;EOFtB,sBAAiB;EACjB,uBAAkB;EAClB,0BAAqB;EDqCjB,WAAO;ARPb;;AEnBE;EEnBE,aAAa;EAQb,mBAAa;EAIb,uBAAiB;EFSjB,cAAc;EMwBZ,WAAO;EAGP,YAAQ;EE5BV,mBRGyB;EACzB,gBAAgB;;EAEhB;;MFyBE;AACN;;AEjCG;EM0BG,WAAO;ARWb;;AWvDE;EPDE,aAAa;EAIb,sBAAgB;EAIhB,mBAAa;EAIb,uBAAiB;EF2BjB,YAAY;EQnBZ,aE+DoB;EVzCpB,kBAAkB;AFwBtB;;AWvEE;ENkBA,eAA6C;EAG3C,mBAA6D;EQR/D,gBCXS;EJuBP,SR+BiB;AF4BrB;;AWpFG;EDyBC,kBRkCwB;AF6B5B;;AEtBE;EGhDA,eAA6C;EAG3C,mBAA6D;ALwEjE;;AM3FA;EACE,2BAA2B;EAC3B,mBAAmB;AN8FrB;;AMhGC;EEgDK,WAAO;EAGP,YAAQ;EE5BV,8BE+DoB;AZgBxB;;AMtGC;EAaG,uBAAuB;EIUvB,UJTkB;EISlB,cE+DoB;ENrEpB,gBAAgB;ANyGpB;;AMlGA;EACE,2BAA2B;EAC3B,mBAAmB;AN2GrB;;AM7GC;EEwBK,WAAO;EAGP,YAAQ;EE5BV,8BE+DoB;AZqDxB;;AMnHC;EAaG,uBAAuB;EIdvB,UJekB;EIflB,cE+DoB;EN9CpB,gBAAgB;ANuHpB;;AMpGA;EACE,8BAA8B;ANuHhC;;AMxHC;EEXK,WAAO;EAGP,YAAQ;EE5BV,mBJyCyB;ANyH7B;;AM9HC;EAQK,mBAAmB;AN0HzB;;AMlIC;EAuBG,mBAAmB;EI3DnB,aE+DoB;EF/DpB,SJ6DiB;EACjB,kBAAkB;AN6HtB;;AehNI;ER8BE,8CAAQ;EAUV,iDAAU;APmMd;;AgBnOI;ELNF;IDmBE,eE+DoB;EZZtB;;EM1ED;IEgDK,WAAO;IAGP,YAAQ;IE5BV,wBE+DoB;EZsBtB;;EM5GD;IIuBG,YE+DoB;EZyCtB;;EMvGD;IEwBK,WAAO;IAGP,YAAQ;IE5BV,mBJUyB;ENgH3B;;EMzHD;IAmBK,mBAAmB;IIpBrB,eE+DoB;IF/DpB,SJsBmB;IACjB,kBAAkB;ENyHtB;;EM/IF;IA2BI,8BAA8B;IAC9B,oBAAoB;EN0HtB;;EMnHD;IIpCG,UJ+CsB;II/CtB,YE+DoB;INdhB,gBMcgB;EZ8GtB;;EMzID;IIpCG,wBE+DoB;EZoHtB;;EM/ID;IA6BK,uBAAuB;IIjEzB,UJkEoB;IIlEpB,YE+DoB;INKlB,gBAAgB;EN+HpB;;EM/JF;IAqCI,2BAA2B;IAC3B,mBAAmB;ENgIrB;AAtJF;;AiBrEI;EFRF;IRwCI,sBAAU;IAAV,iEAAU;EP4Md;;EehPE;IRoCE,sBAAU;EPwNd;AAXF","file":"tile.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  TILE\n\\* ------------------------------------ */\n.fr-tile {\n  position: relative;\n  display: flex;\n  flex-direction: column-reverse;\n  --text-spacing: 0;\n  --title-spacing: 0 0 0.5rem;\n  /**\n   * Forcer la hauteur à 100% pour que les tuiles aient la même hauteur dans le contexte de la grille\n   */\n  /**\n   * Conteneur pour l'image, on force les dimensions à 80x80 tout en permettant de mettre une image\n   * ne respectant pas cette taille :\n   * Si l'image est plus grande, elle sera croppée afin de ne jamais dépasser 80x80.\n   * Si l'image est plus petite, elle sera centrée, en hauteur, en largeur ou bien les deux.\n   */\n  /**\n   * Partie de la tuile contenant le titre (obligatoire) et la description (optionnel)\n   */\n  /**\n   * Titre de la tuile\n   */\n  /**\n   * Description de la tuile\n   */\n  /**\n * Modificateur tuile horizontale\n **/\n  /**\n * Modificateur vertical à partir du breakpoint md -> horizontal en dessous du breakpoint md\n **/\n  /**\n * Modificateur horizontal à partir du breakpoint md -> vertical en dessous du breakpoint md\n **/\n}\n\n.fr-grid-row .fr-tile {\n  height: 100%;\n}\n\n.fr-tile__link {\n  display: inline-flex;\n  --link-underline: none;\n  --link-blank-font: none;\n  --link-blank-content: none;\n  width: 100%;\n}\n\n.fr-tile__img {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  width: 5rem;\n  height: 5rem;\n  margin: 2rem auto 0;\n  overflow: hidden;\n  /**\n     * Dans le cas d'un svg inline sans largeur et hauteur spécifiées, on lui attribue une largeur de 100%.\n     */\n}\n\n.fr-tile__img > svg {\n  width: 100%;\n}\n\n.fr-tile__body {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex-grow: 1;\n  padding: 1rem;\n  text-align: center;\n}\n\n@media (min-width: 48em) {\n  .fr-tile__body {\n    padding: 1.5rem;\n  }\n}\n\n.fr-tile__title {\n  font-size:  1rem ;\n  line-height:  1.5rem ;\n  font-weight: 700;\n  margin: 0;\n}\n\n.fr-tile__title + .fr-tile__desc {\n  margin: 0.5rem 0 0;\n}\n\n.fr-tile__desc {\n  font-size:  1rem ;\n  line-height:  1.5rem ;\n}\n\n.fr-tile--horizontal {\n  flex-direction: row-reverse;\n  align-items: center;\n}\n\n.fr-tile--horizontal .fr-tile__img {\n  width: 3rem;\n  height: 3rem;\n  margin: 1.5rem 0 1.5rem 1.5rem;\n}\n\n@media (min-width: 48em) {\n  .fr-tile--horizontal .fr-tile__img {\n    width: 5rem;\n    height: 5rem;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-tile--horizontal .fr-tile__img {\n    margin: 2rem 0 2rem 2rem;\n  }\n}\n\n.fr-tile--horizontal .fr-tile__body {\n  align-items: flex-start;\n  padding: 0;\n  margin: 1.5rem;\n  text-align: left;\n}\n\n@media (min-width: 48em) {\n  .fr-tile--horizontal .fr-tile__body {\n    margin: 2rem;\n  }\n}\n\n.fr-tile--vertical-md {\n  flex-direction: row-reverse;\n  align-items: center;\n}\n\n.fr-tile--vertical-md .fr-tile__img {\n  width: 3rem;\n  height: 3rem;\n  margin: 1.5rem 0 1.5rem 1.5rem;\n}\n\n@media (min-width: 48em) {\n  .fr-tile--vertical-md .fr-tile__img {\n    width: 5rem;\n    height: 5rem;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-tile--vertical-md .fr-tile__img {\n    margin: 2rem auto 0;\n  }\n}\n\n.fr-tile--vertical-md .fr-tile__body {\n  align-items: flex-start;\n  padding: 0;\n  margin: 1.5rem;\n  text-align: left;\n}\n\n@media (min-width: 48em) {\n  .fr-tile--vertical-md .fr-tile__body {\n    align-items: center;\n    padding: 1.5rem;\n    margin: 0;\n    text-align: center;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-tile--vertical-md {\n    flex-direction: column-reverse;\n    align-items: initial;\n  }\n}\n\n.fr-tile--horizontal-md {\n  flex-direction: column-reverse;\n}\n\n.fr-tile--horizontal-md .fr-tile__img {\n  width: 5rem;\n  height: 5rem;\n  margin: 2rem auto 0;\n}\n\n.fr-tile--horizontal-md .fr-tile__img + .fr-tile__body {\n  min-height: initial;\n}\n\n@media (min-width: 48em) {\n  .fr-tile--horizontal-md .fr-tile__img + .fr-tile__body {\n    padding: 0;\n    margin: 2rem;\n    min-height: 5rem;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-tile--horizontal-md .fr-tile__img {\n    margin: 2rem 0 2rem 2rem;\n  }\n}\n\n.fr-tile--horizontal-md .fr-tile__body {\n  align-items: center;\n  padding: 1rem;\n  margin: 0;\n  text-align: center;\n}\n\n@media (min-width: 48em) {\n  .fr-tile--horizontal-md .fr-tile__body {\n    align-items: flex-start;\n    padding: 0;\n    margin: 2rem;\n    text-align: left;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-tile--horizontal-md {\n    flex-direction: row-reverse;\n    align-items: center;\n  }\n}\n\n.fr-tile {\n  --blend: var(--background-default-grey-blend);\n  background-color: var(--background-default-grey);\n  box-shadow: inset 0 0 0 1px var(--border-default-grey), inset 0 -0.25rem 0 0 var(--border-plain-blue-france);\n}\n\n.fr-tile--grey {\n  --blend: var(--background-contrast-grey-blend);\n  background-color: var(--background-contrast-grey);\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-tile {\n    background-color: #fff;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-tile {\n    box-shadow: inset 0 0 0 1px #e5e5e5, inset 0 -0.25rem 0 0 #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-tile--grey {\n    background-color: #eee;\n  }\n}\n","////\n/// Tile Main\n/// @group tile\n////\n\n/* ------------------------------------ *\\\n  TILE\n\\* ------------------------------------ */\n\n@import 'index';\n@import 'style/module';\n@import 'style/scheme';\n\n@include _tile-scheme;\n","////\n/// Tile Module\n/// @group tile\n////\n\n#{ns(tile)} {\n  @include relative;\n  @include display-flex(column-reverse);\n  @include set-text-margin(0);\n  @include set-title-margin(0 0 2v);\n\n  /**\n   * Forcer la hauteur à 100% pour que les tuiles aient la même hauteur dans le contexte de la grille\n   */\n  #{ns(grid-row)} & {\n    @include size(null, 100%);\n  }\n\n  &__link {\n    display: inline-flex;\n    @include disable-link-style;\n    @include size(100%);\n  }\n\n  /**\n   * Conteneur pour l'image, on force les dimensions à 80x80 tout en permettant de mettre une image\n   * ne respectant pas cette taille :\n   * Si l'image est plus grande, elle sera croppée afin de ne jamais dépasser 80x80.\n   * Si l'image est plus petite, elle sera centrée, en hauteur, en largeur ou bien les deux.\n   */\n  &__img {\n    @include display-flex(null, center, center);\n    flex-shrink: 0;\n    @include size(20v, 20v);\n    @include margin(8v auto 0);\n    overflow: hidden;\n\n    /**\n     * Dans le cas d'un svg inline sans largeur et hauteur spécifiées, on lui attribue une largeur de 100%.\n     */\n    > svg {\n      @include size(100%);\n    }\n  }\n\n  /**\n   * Partie de la tuile contenant le titre (obligatoire) et la description (optionnel)\n   */\n  @include body {\n    @include display-flex(column, center, center);\n    flex-grow: 1;\n    @include padding(4v);\n    @include padding(6v,md);\n    text-align: center;\n  }\n\n  /**\n   * Titre de la tuile\n   */\n  @include title {\n    @include text-style(md);\n    @include font-weight(bold);\n    @include margin(0);\n\n    + #{ns(tile__desc)} {\n      @include margin(2v 0 0);\n    }\n  }\n\n  /**\n   * Description de la tuile\n   */\n  &__desc {\n    @include text-style(md);\n  }\n\n  @import 'module/variations';\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Tile module : Variations\n/// @group Tile\n////\n\n/**\n * Modificateur tuile horizontale\n **/\n&--horizontal {\n  flex-direction: row-reverse;\n  align-items: center;\n\n  #{ns(tile__img)} {\n    @include size(12v, 12v);\n    @include margin(6v 0 6v 6v);\n\n    @include size(20v, 20v, md);\n    @include margin(8v 0 8v 8v, md);\n  }\n\n  #{ns(tile__body)} {\n    align-items: flex-start;\n    @include padding(0);\n    @include margin(6v);\n    @include margin(8v, md);\n    text-align: left;\n  }\n}\n\n/**\n * Modificateur vertical à partir du breakpoint md -> horizontal en dessous du breakpoint md\n **/\n&--vertical-md {\n  flex-direction: row-reverse;\n  align-items: center;\n\n  #{ns(tile__img)} {\n    @include size(12v, 12v);\n    @include margin(6v 0 6v 6v);\n\n    @include size(20v, 20v, md);\n    @include margin(8v auto 0, md);\n  }\n\n  #{ns(tile__body)} {\n    align-items: flex-start;\n    @include padding(0);\n    @include margin(6v);\n    text-align: left;\n\n    @include respond-from(md) {\n      align-items: center;\n      @include padding(6v);\n      @include margin(0);\n      text-align: center;\n    }\n  }\n\n  @include respond-from(md) {\n    flex-direction: column-reverse;\n    align-items: initial;\n  }\n}\n\n/**\n * Modificateur horizontal à partir du breakpoint md -> vertical en dessous du breakpoint md\n **/\n&--horizontal-md {\n  flex-direction: column-reverse;\n\n  #{ns(tile__img)} {\n    @include size(20v, 20v);\n    @include margin(8v auto 0);\n\n    + #{ns(tile__body)} {\n      min-height: initial;\n\n      @include respond-from(md) {\n        @include padding(0);\n        @include margin(8v);\n        min-height: space(20v);\n      }\n    }\n\n    @include respond-from(md) {\n      @include margin(8v 0 8v 8v);\n    }\n  }\n\n  #{ns(tile__body)} {\n    align-items: center;\n    @include padding(4v);\n    @include margin(0);\n    text-align: center;\n\n    @include respond-from(md) {\n      align-items: flex-start;\n      @include padding(0);\n      @include margin(8v);\n      text-align: left;\n    }\n  }\n\n  @include respond-from(md) {\n    flex-direction: row-reverse;\n    align-items: center;\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $part, $decisions, $legacy: false, $important: false, $value: $COLOR, $hover: false) {\n  $result: str-replace($value, '$COLOR', '$color#1');\n  $length: length($decisions) / 2;\n  @for $i from 1 through $length {\n    $token: nth($decisions, $i * 2 - 1);\n    $tint: nth($decisions, $i * 2);\n    @if $tint == accent {\n      $tint: $ACCENT;\n    }\n    $needle: '$color#1';\n    @if length($decisions) > 2 {\n      $needle: '$color##{$i}';\n    }\n    $part-token: _get-part-token($part, $token);\n    $p: map-get($part-token, part);\n    $token: map-get($part-token, token);\n\n    @if $tint == neutral {\n      $tint: _get-neutral-tint($p, $token);\n    }\n    $color: _get-value($p, $token, $tint, $legacy);\n    $result: _replace_color($result, $color, $needle);\n\n    @if $important {\n      $result: #{$result} !important;\n    }\n\n    @if $hover and $part == background and $p == background and $legacy == false {\n      $blend: var(#{_get-decision-prop($part, $token, $tint)}-blend);\n      @if $important {\n        $blend: #{$blend} !important;\n      }\n\n      --blend: #{$blend};\n    }\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(background-color, background, $decisions, $legacy, $important, $COLOR, true);\n}\n\n@mixin scheme-element-bg-transparent($legacy: false, $hover: false) {\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($decisions, $legacy: false, $important: false, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: length($decisions) / 2;\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-text-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(color, text, $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-fill-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(fill, background , $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de border\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n@mixin scheme-element-border-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR, $side:null) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($prop, border, $decisions, $legacy, $important, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($decisions, $legacy: false, $important: false, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: length($decisions) / 2;\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $decisions, $legacy, $important, space($value));\n}\n\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tool : Reset\n/// @group core\n////\n\n@mixin a-reset {\n  text-decoration: none;\n  color: inherit;\n}\n\n@mixin enable-link-style() {\n  --link-underline: 0 1px 0 0 currentColor;\n  --link-blank-font: #{font-icon(sm)};\n  --link-blank-content: \"\\00a0#{icon-glyph(external-link-line)}\";\n}\n\n@mixin disable-link-style() {\n  --link-underline: none;\n  --link-blank-font: none;\n  --link-blank-content: none;\n}\n\n@mixin link-underline() {\n  box-shadow: var(--link-underline);\n}\n\n@mixin link-blank() {\n  @include after(var(--link-blank-content)) {\n    font: var(--link-blank-font);\n  }\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tool : Selector block\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Function : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if type-of($value) == list {\n    $list: ();\n    $separator: list-separator($value);\n    @each $v in $value {\n      $list: append($list, space($v), $separator);\n    }\n    @return $list;\n  }\n  @if type-of($value) == string {\n    $c: str-index($value, '(');\n    @if $c {\n      $b: null;\n      $n: 0;\n      $i: $c + 1;\n      $l: str-length($value);\n      @while $b == null and $i <= $l {\n        $char: str-slice($value, $i, $i);\n        @if $char == '(' {\n          $n: $n + 1;\n        }\n        @else if $char == ')' {\n          @if $n > 0 {\n            $n: $n - 1;\n          }\n          @else {\n            $b: $i;\n          }\n        }\n        $i: $i + 1;\n      }\n\n      $start: unquote('');\n      $middle: space(str-slice($value, $c + 1, $b - 1));\n      $end: unquote('');\n\n      @if $c > 1 {\n        $start: space(str-slice($value, 1, $c - 1));\n      }\n\n      $l: str-length($value);\n      @if $b < $l {\n        $end: space(str-slice($value, $b + 1, $l));\n      }\n\n      @return unquote('#{$start}(#{$middle})#{$end}');\n    }\n\n    @if str-index($value, ',') {\n      @return space(str-split($value, ','));\n    }\n\n    @if str-index($value, ' ') {\n      @return space(str-split($value, ' '));\n    }\n\n    $value: unquote($value);\n  }\n\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $v: quote($value);\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return $value;\n}\n","////\n/// Core Tool : Typography font-weight\n/// @group core\n////\n\n/// Return font-weight value from font-weight map.\n///\n/// @param {String} $scale [\"regular\"] - Type scale value from `$weight-scale` (Default to \"regular\" = 400)\n///\n/// @example scss - Set font-weight to bold (700)\n///   .foo {\n///     font-weight: font-weight(\"bold\");\n///   }\n\n@function font-weight($scale: regular) {\n  @return map-get($font-weight-scale, $scale);\n}\n\n@mixin font-weight($scale) {\n  font-weight: font-weight($scale);\n}\n\n@mixin font-weights() {\n  @each $name, $weight in $font-weight-scale {\n    & #{ns('text--' + $name)} {\n      font-weight: #{$weight} !important;\n    }\n  }\n}\n","////\n/// Core Setting : Typography font-weight\n/// @group core\n////\n\n$font-weight-scale: (\n  light: 300,\n  regular: 400,\n  bold: 700,\n  xx-bold: 900\n);\n","////\n/// Tile Module\n/// @group tile\n////\n\n@mixin _tile-scheme($legacy: false) {\n  #{ns(tile)} {\n    @include scheme-element-bg-color(default grey, $legacy);\n    @include scheme-element-box-shadow-color(default grey plain blue-france, $legacy, false,  all-1-in bottom-1v-in);\n\n    &--grey {\n      @include scheme-element-bg-color(contrast grey, $legacy);\n    }\n  }\n}\n","////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n"]}