{"version":3,"sources":["../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../quote.main.css","<no source>","../../../../../../src/component/quote/style/_module.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/core/style/spacing/tool/_space.scss","../../../../../../src/core/style/spacing/function/_space.scss","../../../../../../src/core/style/spacing/tool/_position.scss","../../../../../../src/core/style/icon/_tool.scss","../../../../../../src/core/style/display/tool/_display.scss","../../../../../../src/core/style/spacing/tool/_size.scss","../../../../../../src/core/style/typography/tool/_styles.scss","../../../../../../src/core/style/typography/tool/_font-weight.scss","../../../../../../src/core/style/typography/setting/_font-weight.scss","../../../../../../src/core/style/reset/tool/_list.scss","../../../../../../src/core/style/selector/tool/_breakpoint.scss"],"names":[],"mappings":"AAgBE,gBCeF;AC/BA;;GAAA,ACKA,UC6CI,4FAAU,CDrCZ,8BAAkC,CADlC,2BAA4B,CAD5B,uBAAwB,CEoBtB,QFxBe,CEwBf,oBC+DoB,CCxFtB,iBNKF,CDKE,iBIkCE,sCAAU,CICZ,WALU,CLzBR,aAAc,CKsChB,0CAJ0E,CH5BtE,oBJIN,CENE,kBMNE,sBAAa,CARb,YAAa,CAIb,qBAAgB,CAQhB,sBReJ,CEbG,wEEEG,mBJqCN,CEvCG,6BMNC,sBAAa,CARb,YAAa,CAIb,qBAAgB,CAQhB,sBAAiB,CCiBf,kBTsCN,CEzEA,qBQ8FI,uBAA6B,CNpE7B,QJ0DJ,CEpFA,uBQmBE,iBAA6C,CCL7C,eCXS,CFmBP,gBVoEJ,CEzBE,kBQ9CA,iBAA6C,CCL7C,eCXS,CFmBP,kBAA6D,CNA3D,oBJkFN,CEjCE,iBAEE,qBAAsB,CACtB,iBAAkB,CMpElB,YAAa,CAIb,kBAAgB,CNiEhB,eAAgB,CI1ElB,iBAAU,CGkDN,aT+DN,CE3CG,qBOjBG,WAAQ,CAHR,UToEN,CEvHA,eQmBE,gBAA6C,CRwE3C,iBAAkB,CQrElB,mBVkHJ,CExIA,qBWoBE,cAAU,CACV,cAAU,CACV,YAAW,CACX,YAAW,CACX,YAAW,CACX,aAAY,CACZ,iBbwHF,CElJA,wBQmBE,gBAA6C,CAG3C,mBViIJ,CEvJA,uCMMI,YAAa,CAIb,kBAAgB,CAYhB,cAAW,CAJX,0BR4IJ,CE9JA,0CAyGQ,oBFyDR,CDvJE,iEAGI,WG8FsB,CH1FtB,oBAAS,CKJT,mBC2EkB,CD1ElB,oBJ0JN,CD9JE,yCIkCE,iDHwIJ,CD1KE,iCIkCE,yCH4IJ,CD9KE,iCIkCE,yCHgJJ,CDlLE,+BIkCE,uCHoJJ,CDtLE,iCIkCE,yCHwJJ,CD1LE,6BIkCE,qCH4JJ,CD9LE,+BIkCE,uCHgKJ,CDlME,iCIkCE,yCHoKJ,CDtME,+BIkCE,uCHwKJ,CD1ME,6BIkCE,qCH4KJ,CD9ME,mCIkCE,2CHgLJ,CDlNE,kCIkCE,0CHoLJ,CDtNE,sCIkCE,8CHwLJ,CD1NE,mCIkCE,2CH4LJ,CD9NE,gCIkCE,wCHgMJ,CDlOE,8BIkCE,sCHoMJ,CDtOE,mCIkCE,2CHwMJ,CcxOI,wBZbJ,UAYI,uBAAwB,CADxB,wBAAyB,CEezB,kBJfF,CESA,kBEEI,iBCmEkB,CItDlB,eAAY,CTGhB,CElBC,wEEEG,aJ0CJ,CE5CC,6BOeG,eT2CJ,CE9EF,uBQmBE,kBAA6C,CAG3C,mBV0EF,CEzBA,iBOjBI,cAAQ,CH1CV,WAAM,CFUJ,mBCmEkB,CCxFtB,iBAAU,CAER,OAAK,CGgDH,aT8EJ,CArHF","file":"quote.main.min.css","sourcesContent":["////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  QUOTE\n\\* ------------------------------------ */\n.fr-quote {\n  position: relative;\n  margin: 0;\n  padding: 0 0.5rem 2rem 0.5rem;\n  background-size: 50% 1px;\n  background-repeat: no-repeat;\n  background-position: 0.5rem 100%;\n}\n\n@media (min-width: 48em) {\n  .fr-quote {\n    padding: 0 0 0 2rem;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-quote {\n    background-size: 1px 100%;\n    background-position: 0 0;\n  }\n}\n\n.fr-quote::before {\n  font: normal normal normal 2rem/1 dsfr-icon;\n  content: \"\";\n  display: block;\n  padding-bottom: 0.5rem;\n}\n\n.fr-quote--column {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n}\n\n@media (min-width: 48em) {\n  .fr-quote--column {\n    margin-left: 13rem;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-quote--column {\n    min-height: 13rem;\n  }\n}\n\n.fr-quote--column .fr-quote__author {\n  margin-left: 5.25rem;\n}\n\n@media (min-width: 48em) {\n  .fr-quote--column .fr-quote__author {\n    margin-left: 0;\n  }\n}\n\n.fr-quote--column .fr-quote__source {\n  margin-left: 5.25rem;\n}\n\n@media (min-width: 48em) {\n  .fr-quote--column .fr-quote__source {\n    margin-left: 0;\n  }\n}\n\n.fr-quote--column figcaption {\n  min-height: 4.25rem;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n}\n\n@media (min-width: 48em) {\n  .fr-quote--column figcaption {\n    min-height: auto;\n  }\n}\n\n.fr-quote blockquote {\n  margin: 0;\n  --text-spacing: 0 0 1rem;\n}\n\n.fr-quote blockquote p {\n  font-size:  1.25rem ;\n  line-height:  2rem ;\n  font-weight: 700;\n}\n\n@media (min-width: 48em) {\n  .fr-quote blockquote p {\n    font-size:  1.375rem ;\n    line-height:  2.25rem ;\n  }\n}\n\n.fr-quote__author {\n  font-weight: 700;\n  font-size:  0.875rem ;\n  line-height:  1.5rem ;\n  margin-bottom: 0.25rem;\n}\n\n.fr-quote__image {\n  width: 4.25rem;\n  background-size: cover;\n  border-radius: 50%;\n  overflow: hidden;\n  position: absolute;\n  display: flex;\n  flex-direction: row;\n}\n\n.fr-quote__image img {\n  width: 100%;\n  height: 100%;\n}\n\n@media (min-width: 48em) {\n  .fr-quote__image {\n    position: absolute;\n    top: 50%;\n    left: -13rem;\n    width: 11.5rem;\n    height: 11.5rem;\n    margin-top: -5.75rem;\n  }\n}\n\n.fr-quote cite {\n  font-size:  0.75rem ;\n  line-height:  1.25rem ;\n  font-style: italic;\n}\n\n.fr-quote figcaption {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n\n.fr-quote figcaption li {\n  font-size:  0.75rem ;\n  line-height:  1.25rem ;\n}\n\n.fr-quote figcaption .fr-quote__source {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n}\n\n.fr-quote figcaption .fr-quote__source li {\n  display: inline-block;\n}\n\n.fr-quote figcaption .fr-quote__source li:not(:last-child)::after {\n  content: \"·\";\n  display: inline-block;\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\n\n.fr-quote {\n  background-image: linear-gradient(0deg, var(--border-default-grey), var(--border-default-grey));\n}\n\n.fr-quote::before {\n  color: var(--artwork-minor-blue-france);\n}\n\n.fr-quote--green-tilleul-verveine::before {\n  color: var(--artwork-minor-green-tilleul-verveine);\n}\n\n.fr-quote--green-bourgeon::before {\n  color: var(--artwork-minor-green-bourgeon);\n}\n\n.fr-quote--green-emeraude::before {\n  color: var(--artwork-minor-green-emeraude);\n}\n\n.fr-quote--green-menthe::before {\n  color: var(--artwork-minor-green-menthe);\n}\n\n.fr-quote--green-archipel::before {\n  color: var(--artwork-minor-green-archipel);\n}\n\n.fr-quote--blue-ecume::before {\n  color: var(--artwork-minor-blue-ecume);\n}\n\n.fr-quote--blue-cumulus::before {\n  color: var(--artwork-minor-blue-cumulus);\n}\n\n.fr-quote--purple-glycine::before {\n  color: var(--artwork-minor-purple-glycine);\n}\n\n.fr-quote--pink-macaron::before {\n  color: var(--artwork-minor-pink-macaron);\n}\n\n.fr-quote--pink-tuile::before {\n  color: var(--artwork-minor-pink-tuile);\n}\n\n.fr-quote--yellow-tournesol::before {\n  color: var(--artwork-minor-yellow-tournesol);\n}\n\n.fr-quote--yellow-moutarde::before {\n  color: var(--artwork-minor-yellow-moutarde);\n}\n\n.fr-quote--orange-terre-battue::before {\n  color: var(--artwork-minor-orange-terre-battue);\n}\n\n.fr-quote--brown-cafe-creme::before {\n  color: var(--artwork-minor-brown-cafe-creme);\n}\n\n.fr-quote--brown-caramel::before {\n  color: var(--artwork-minor-brown-caramel);\n}\n\n.fr-quote--brown-opera::before {\n  color: var(--artwork-minor-brown-opera);\n}\n\n.fr-quote--beige-gris-galet::before {\n  color: var(--artwork-minor-beige-gris-galet);\n}\n",null,"////\n/// Quote Module\n/// @group quote\n////\n\n#{ns(quote)} {\n  @include relative;\n  @include margin(0);\n  @include padding(0 2v 8v 2v);\n  @include padding(0 0 0 8v, md);\n\n  background-size: 50% 1px;\n  background-repeat: no-repeat;\n  background-position: space(2v 100%);\n\n  @include respond-from(md) {\n    background-size: 1px 100%;\n    background-position: 0 0;\n  }\n\n  @include icon(chat-quote-line,lg) {\n    display: block;\n    @include padding-bottom(2v);\n  }\n\n  &--column {\n    @include display-flex(column, flex-start, center);\n    @include margin-left(52v, md);\n\n    @include respond-from(md) {\n      @include min-height(52v);\n    }\n\n    #{ns(quote__author)} {\n      @include margin-left(21v);\n      @include margin-left(0, md);\n    }\n\n    #{ns(quote__source)} {\n      @include margin-left(21v);\n      @include margin-left(0, md);\n    }\n\n    figcaption {\n      @include min-height(17v);\n      @include display-flex(column, flex-start, center);\n\n      @include respond-from(md) {\n        @include min-height(auto);\n      }\n    }\n  }\n\n  blockquote {\n    @include margin(0);\n    @include set-text-margin(0 0 4v);\n\n    p {\n      @include text-style(xl);\n      @include font-weight(bold);\n\n      // Pour ajouter les guillets en css\n      // @include before('«\\0000A0', 'inline-block');\n\n      // &:last-of-type() {\n      //   @include after('\\0000A0»', 'inline-block');\n      // }\n    }\n  }\n\n  &__author {\n    @include font-weight(bold);\n    @include text-style(sm);\n    @include margin-bottom(1v);\n  }\n\n  &__image {\n    @include size(17v);\n    background-size: cover;\n    border-radius: 50%;\n    overflow: hidden;\n    @include absolute;\n    @include display-flex;\n\n    img {\n      @include size(100%, 100%);\n    }\n\n    @include respond-from(md) {\n      @include absolute(50%,null,null,-52v,46v,46v);\n      @include margin-top(-23v);\n    }\n  }\n\n  cite {\n    @include text-style(xs);\n    font-style: italic;\n  }\n\n  figcaption {\n    @include disable-list-style;\n\n    li {\n      @include text-style(xs);\n    }\n\n    #{ns(quote)}__source {\n      @include display-flex(row,null,flex-start,wrap);\n\n      li {\n        display: inline-block;\n\n        &:not(:last-child) {\n          @include after('·', 'inline-block') {\n            @include padding-x(1v);\n          }\n        }\n      }\n    }\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $part, $decisions, $legacy: false, $important: false, $value: $COLOR, $hover: false) {\n  $result: str-replace($value, '$COLOR', '$color#1');\n  $length: length($decisions) / 2;\n  @for $i from 1 through $length {\n    $token: nth($decisions, $i * 2 - 1);\n    $tint: nth($decisions, $i * 2);\n    @if $tint == accent {\n      $tint: $ACCENT;\n    }\n    $needle: '$color#1';\n    @if length($decisions) > 2 {\n      $needle: '$color##{$i}';\n    }\n    $part-token: _get-part-token($part, $token);\n    $p: map-get($part-token, part);\n    $token: map-get($part-token, token);\n\n    @if $tint == neutral {\n      $tint: _get-neutral-tint($p, $token);\n    }\n    $color: _get-value($p, $token, $tint, $legacy);\n    $result: _replace_color($result, $color, $needle);\n\n    @if $important {\n      $result: #{$result} !important;\n    }\n\n    @if $hover and $part == background and $p == background and $legacy == false {\n      $blend: var(#{_get-decision-prop($part, $token, $tint)}-blend);\n      @if $important {\n        $blend: #{$blend} !important;\n      }\n\n      --blend: #{$blend};\n    }\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(background-color, background, $decisions, $legacy, $important, $COLOR, true);\n}\n\n@mixin scheme-element-bg-transparent($legacy: false, $hover: false) {\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($decisions, $legacy: false, $important: false, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: length($decisions) / 2;\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-text-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(color, text, $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-fill-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(fill, background , $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de border\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n@mixin scheme-element-border-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR, $side:null) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($prop, border, $decisions, $legacy, $important, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($decisions, $legacy: false, $important: false, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: length($decisions) / 2;\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $decisions, $legacy, $important, space($value));\n}\n\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Function : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if type-of($value) == list {\n    $list: ();\n    $separator: list-separator($value);\n    @each $v in $value {\n      $list: append($list, space($v), $separator);\n    }\n    @return $list;\n  }\n  @if type-of($value) == string {\n    $c: str-index($value, '(');\n    @if $c {\n      $b: null;\n      $n: 0;\n      $i: $c + 1;\n      $l: str-length($value);\n      @while $b == null and $i <= $l {\n        $char: str-slice($value, $i, $i);\n        @if $char == '(' {\n          $n: $n + 1;\n        }\n        @else if $char == ')' {\n          @if $n > 0 {\n            $n: $n - 1;\n          }\n          @else {\n            $b: $i;\n          }\n        }\n        $i: $i + 1;\n      }\n\n      $start: unquote('');\n      $middle: space(str-slice($value, $c + 1, $b - 1));\n      $end: unquote('');\n\n      @if $c > 1 {\n        $start: space(str-slice($value, 1, $c - 1));\n      }\n\n      $l: str-length($value);\n      @if $b < $l {\n        $end: space(str-slice($value, $b + 1, $l));\n      }\n\n      @return unquote('#{$start}(#{$middle})#{$end}');\n    }\n\n    @if str-index($value, ',') {\n      @return space(str-split($value, ','));\n    }\n\n    @if str-index($value, ' ') {\n      @return space(str-split($value, ' '));\n    }\n\n    $value: unquote($value);\n  }\n\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $v: quote($value);\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return $value;\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tool : Icon\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin icon-size($size:md) {\n  font-size: #{icon-size($size)} !important;\n}\n\n@mixin with-icon($size:md) {\n  @include has-icon {\n    @include before {\n      @if $size != md {\n        @include icon-size($size);\n      }\n      @content;\n    }\n  }\n}\n\n@mixin generate-icons($base) {\n  @each $icon, $settings in $icons-settings {\n    #{ns($base + '-' + $icon)} {\n      @include before(icon-glyph($icon));\n    }\n  }\n}\n\n@function icon-glyph($icon, $is-ligature: false) {\n  $icon-settings: map-get($icons-settings, $icon);\n  @if $is-ligature {\n    @return \"#{map-get($icon-settings, ligature)}\";\n  }\n  @else {\n    @return \"#{map-get($icon-settings, codepoint)}\";\n  }\n}\n\n@mixin icon-content($icon) {\n  content: icon-glyph($icon);\n}\n\n@function font-icon($size: md) {\n  @return normal normal normal #{icon-size($size)}/1 #{$namespace}-icon;\n}\n\n@mixin font-icon($size: md) {\n  font: font-icon($size);\n}\n\n@mixin icon($icon:null, $size:md, $pseudo:before) {\n  @include _pseudo($pseudo) {\n    @if $size != null {\n      @include font-icon($size);\n    }\n\n    @if $icon != null {\n      @include icon-content($icon);\n    }\n\n    @content;\n  }\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Core Tool : Typography font-weight\n/// @group core\n////\n\n/// Return font-weight value from font-weight map.\n///\n/// @param {String} $scale [\"regular\"] - Type scale value from `$weight-scale` (Default to \"regular\" = 400)\n///\n/// @example scss - Set font-weight to bold (700)\n///   .foo {\n///     font-weight: font-weight(\"bold\");\n///   }\n\n@function font-weight($scale: regular) {\n  @return map-get($font-weight-scale, $scale);\n}\n\n@mixin font-weight($scale) {\n  font-weight: font-weight($scale);\n}\n\n@mixin font-weights() {\n  @each $name, $weight in $font-weight-scale {\n    & #{ns('text--' + $name)} {\n      font-weight: #{$weight} !important;\n    }\n  }\n}\n","////\n/// Core Setting : Typography font-weight\n/// @group core\n////\n\n$font-weight-scale: (\n  light: 300,\n  regular: 400,\n  bold: 700,\n  xx-bold: 900\n);\n","////\n/// Core Tool : Reset list\n/// @group core\n////\n\n@mixin enable-list-style() {\n  $selector: null;\n\n  @if & == null {\n    $selector: ':root';\n  }\n\n  @include nest($selector) {\n    --ul-type: \"●\\00a0\\00a0\";\n    --ol-type: decimal;\n    --ul-start: #{space(4v)};\n    --ol-start: #{space(6v)};\n    --xl-block: #{space(2v)};\n    --li-bottom: #{space(1v)};\n    --xl-base: 1em;\n    --ol-content: counters(li-counter, \".\") \".\\00a0\\00a0\";\n  }\n}\n\n@mixin disable-list-style() {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n","////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n"]}