{"version":3,"sources":["<no source>","../../../../../../src/legacy/style/tool/_legacy.scss","../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../quote.legacy.css","../../../../../../src/component/quote/style/_scheme.scss"],"names":[],"mappings":"AAAA;;GAAA,ACcI,2DCEF,iBC8BI,aC3CJ,CFaA,yCC8BI,aCrCJ,CFOA,iCC8BI,aC/BJ,CFCA,iCC8BI,aCzBJ,CFLA,+BC8BI,aCnBJ,CFXA,iCC8BI,aCbJ,CFjBA,6BC8BI,aCPJ,CFvBA,+BC8BI,aCDJ,CF7BA,iCC8BI,aCKJ,CFnCA,+BC8BI,aCWJ,CFzCA,6BC8BI,aCiBJ,CF/CA,mCC8BI,aCuBJ,CFrDA,kCC8BI,aC6BJ,CF3DA,sCC8BI,aCmCJ,CFjEA,mCC8BI,aCyCJ,CFvEA,gCC8BI,aC+CJ,CF7EA,8BC8BI,aCqDJ,CFnFA,mCC8BI,aC2DJ,CCnGA,UFwCI,sDCiEJ,CA3GF","file":"quote.legacy.min.css","sourcesContent":[null,"////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $part, $decisions, $legacy: false, $important: false, $value: $COLOR, $hover: false) {\n  $result: str-replace($value, '$COLOR', '$color#1');\n  $length: length($decisions) / 2;\n  @for $i from 1 through $length {\n    $token: nth($decisions, $i * 2 - 1);\n    $tint: nth($decisions, $i * 2);\n    @if $tint == accent {\n      $tint: $ACCENT;\n    }\n    $needle: '$color#1';\n    @if length($decisions) > 2 {\n      $needle: '$color##{$i}';\n    }\n    $part-token: _get-part-token($part, $token);\n    $p: map-get($part-token, part);\n    $token: map-get($part-token, token);\n\n    @if $tint == neutral {\n      $tint: _get-neutral-tint($p, $token);\n    }\n    $color: _get-value($p, $token, $tint, $legacy);\n    $result: _replace_color($result, $color, $needle);\n\n    @if $important {\n      $result: #{$result} !important;\n    }\n\n    @if $hover and $part == background and $p == background and $legacy == false {\n      $blend: var(#{_get-decision-prop($part, $token, $tint)}-blend);\n      @if $important {\n        $blend: #{$blend} !important;\n      }\n\n      --blend: #{$blend};\n    }\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(background-color, background, $decisions, $legacy, $important, $COLOR, true);\n}\n\n@mixin scheme-element-bg-transparent($legacy: false, $hover: false) {\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($decisions, $legacy: false, $important: false, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: length($decisions) / 2;\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-text-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(color, text, $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-fill-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(fill, background , $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de border\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n@mixin scheme-element-border-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR, $side:null) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($prop, border, $decisions, $legacy, $important, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($decisions, $legacy: false, $important: false, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: length($decisions) / 2;\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $decisions, $legacy, $important, space($value));\n}\n\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote::before {\n    color: #6a6af4;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--green-tilleul-verveine::before {\n    color: #b7a73f;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--green-bourgeon::before {\n    color: #68a532;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--green-emeraude::before {\n    color: #00a95f;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--green-menthe::before {\n    color: #009081;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--green-archipel::before {\n    color: #009099;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--blue-ecume::before {\n    color: #465f9d;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--blue-cumulus::before {\n    color: #417dc4;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--purple-glycine::before {\n    color: #a558a0;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--pink-macaron::before {\n    color: #e18b76;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--pink-tuile::before {\n    color: #ce614a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--yellow-tournesol::before {\n    color: #c8aa39;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--yellow-moutarde::before {\n    color: #c3992a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--orange-terre-battue::before {\n    color: #e4794a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--brown-cafe-creme::before {\n    color: #d1b781;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--brown-caramel::before {\n    color: #c08c65;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--brown-opera::before {\n    color: #bd987a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--beige-gris-galet::before {\n    color: #aea397;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote {\n    background-image: linear-gradient(0deg, #e5e5e5, #e5e5e5);\n  }\n}\n","////\n/// quote Scheme\n/// @group quote\n////\n\n@mixin _quote-scheme($legacy: false) {\n  #{ns(quote)} {\n    @include before {\n      @include scheme-element-text-color(artwork-minor blue-france, $legacy);\n    }\n\n    @include accent-modifiers {\n      @include before {\n        @include scheme-element-text-color(artwork-minor accent, $legacy);\n      }\n    }\n\n    @include scheme-element-bg-image-color(border-default neutral, $legacy);\n  }\n}\n"]}