{"version":3,"sources":["<no source>","../../../toggle.css","../../../../../../src/component/toggle/main.scss","../../../../../../src/component/toggle/style/module/_toggle.scss","../../../../../../src/core/style/spacing/tool/_position.scss","../../../../../../src/core/style/spacing/tool/_space.scss","../../../../../../src/core/style/typography/tool/_styles.scss","../../../../../../src/component/toggle/style/_scheme.scss","../../../../../../src/core/style/spacing/tool/_size.scss","../../../../../../src/core/style/spacing/function/_space.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../src/core/style/spacing/tool/_z-index.scss","../../../../../../src/core/style/spacing/setting/_z-index.scss","../../../../../../src/core/style/icon/_tool.scss","../../../../../../src/core/style/display/tool/_display.scss","../../../../../../src/component/toggle/style/module/_variants.scss","../../../../../../src/component/toggle/style/module/_group.scss","../../../../../../src/core/style/reset/tool/_list.scss","../../../../../../src/core/style/color/tool/_disabled.scss","../../../../../../src/component/toggle/style/_legacy.scss","../../../../../../src/legacy/style/tool/_legacy.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACKhB;;yCDFyC;AEEzC;EACE,aAAa;EACb,eAAe;ECDf,kBAAU;ECyBR,eFtBmB;;EG0FnB,iBAA6B;EAA7B,kBAA6B;;EHtF/B;;;;IFEE;EMiCA;;KNuHC;EMvHD;;KN+KC;AA/ML;;AEXA;EAcI,cAAc;EKqCZ,aAAO;EAGP,cAAQ;ELtCV,sBMyEoB;EJ/DpB,SFTiB;EACjB,wBAAwB;EACxB,qBAAqB;EACrB,gBAAgB;;EAEhB;;;;MFIE;ESmBF,iEAAU;ATlBd;;AUhBE;EAGI,uERgBkH;AFCxH;;AUpBE;ERuBQ,2BAAgC;EAChC,cAAc;ESxBtB,aCJW;AZ8Bb;;AErCA;EA2CI,oBAAoB;EACpB,+BMSiD;ENRjD,kBM4CoB;EJnElB,kBImEkB;EHtEtB,eAA6C;EAG3C,mBAA6D;;EH2B7D;;;MFAE;;EEcF;;;MFVE;;EE2BF;;;MFvBE;AACN;;AE1DA;EEsBM,eFgCuB;AFQ7B;;AUnDE;EAGI,uER0C8G;AFUpH;;AElEA;EEsBM,kBImEkB;ARnBxB;;AU3DE;ERyDI,cAAc;EACd,iBMoBkB;ENnBlB,2BMjB+C;EJ/B/C,kBImEkB;EJnElB,oBImEkB;EJnElB,kBImEkB;EHtEtB,kBAA6C;EAG3C,oBAA6D;EHqD3D,qBAAqB;EACrB,gBAAgB;EAChB,wBAAwB;EOhC1B,qCAAU;ATuCd;;AUzEE;EG2CA,2CAJ0E;EAJ1E,YALU;ECnCR,aAAa;EAQb,mBAAa;EAIb,uBAAiB;EXjBnB,kBAAU;EAER,SAAK;EASL,OAAM;EIuCJ,aAAO;EAGP,cAAQ;ELiCR,kBAAkB;EAClB,oBAAoB;ES7ExB,UCLO;EHuCL,qCAAU;EAAV,iEAAU;;EAVR,6CAAQ;EAUV,gDAAU;ATuDd;;AEpGA;EA8FI,cAAc;EExEZ,gBImEkB;EHtEtB,kBAA6C;EAG3C,oBAA6D;EH2E7D,gBAAgB;EOpDhB,+BAAU;AT+Dd;;Ae5GA;;EfgHE;Ae7GF;EAEI,QAAQ;EXqBR,kBWpB0B;Af8G9B;;AejHA;EXmBM,eWbuB;EXavB,mBImEkB;ARgCxB;;AetHA;EAYI,8BAA8B;EXO5B,eWNqB;EACvB,0BAAiC;Af8GrC;;AUpHE;EKSI,cAAc;EACd,QAAQ;EXCR,qBImEkB;EJnElB,iBImEkB;EOjElB,iBAAiB;Af+GvB;;AU5HE;EKiBI,UAAU;EACV,WP4DkB;ARmDxB;;AezIA;EA+BI,QAAQ;Af8GZ;;AgBhJA;;EhBoJE;AgBjJF;ECiBE,eAAU;EACV,eAAU;EACV,aAAW;EACX,aAAW;EACX,aAAW;EACX,cAAY;EACZ,kBAAa;AjBmIf;;AM5JE;EGkCI,mDAAQ;EAUV,sDAAU;AT0Id;;AkBhKU;;ETsBN,uDAAU;AT8Id;;AM1LE;;EGkCI,8CAAQ;EAUV,iDAAU;ATmJd;;AUrLE;;EDkCE,gCAAU;ATuJd;;AUzLE;;EDkCE,gCAAU;EAAV,uDAAU;AT4Jd;;AM3JI;EGDA,uDAAU;AToKd;;AmBjNA;EAGM,aAAa;AnBkNnB;;AoB5MI;EVEF;ID8BI,cAAU;ETuLd;;EUrNA;ID8BI,cAAU;IAAV,mCAAU;IAAV,sBAAU;ET6Ld;;EMrOA;IGwCI,mCAAU;ET+Md;;EMvPA;IGwCI,yBAAU;ETqNd;;EkBvOQ;;ITkBJ,mCAAU;ET2Nd;;EMnQA;;IGwCI,yBAAU;ETiOd;;EU/PA;;ID8BI,cAAU;ETuOd;;EUrQA;;ID8BI,cAAU;IAAV,mCAAU;ET6Od;;EMrRA;IGwCI,WAAU;ETyPd;;EMpPE;IGLE,oCAAU;ET+Pd;AAvEF","file":"toggle.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  TOGGLE\n\\* ------------------------------------ */\n.fr-toggle {\n  display: flex;\n  flex-wrap: wrap;\n  position: relative;\n  padding: 1rem 0;\n  --text-spacing: 0;\n  --title-spacing: 0;\n  /*\n   * On utilise un input de type checkbox pour gérer le toggle\n   * On reset ses styles afin de ne garder que son fonctionnement et son espacement\n   * On l'utilisera égalemement pour afficher l'état du toggle (optionnel)\n   */\n}\n\n.fr-toggle input[type=\"checkbox\"] {\n  flex-shrink: 0;\n  width: 2.5rem;\n  height: 1.5rem;\n  border-radius: 0.75rem;\n  margin: 0;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  /*\n     * On applique des styles aux pseudo-elements du label quand l'input est check.\n     * On change l'ordre du texte d'état du label dans le content pour afficher\n     * la valeur correspondant à l'état checked (optionnel).\n     */\n}\n\n.fr-toggle input[type=\"checkbox\"]:checked ~ .fr-toggle__label[data-fr-unchecked-label][data-fr-checked-label]::before {\n  content: attr(data-fr-checked-label) \"\\a\" attr(data-fr-unchecked-label);\n}\n\n.fr-toggle input[type=\"checkbox\"]:checked ~ .fr-toggle__label::after {\n  transform: translateX(1rem);\n  text-indent: 0;\n  z-index: 2000;\n}\n\n.fr-toggle label {\n  display: inline-flex;\n  flex-basis: calc(100% - 2.5rem);\n  min-height: 1.5rem;\n  padding-left: 2rem;\n  font-size:  1rem ;\n  line-height:  1.5rem ;\n  /*\n     * Si les data attributes sont présents, on assigne un content au pseudo element before,\n     * et on enlève le padding left du label.\n     */\n  /*\n     * On prévoit un pseudo-élément pour afficher l'état du bouton( optionnel)\n     * On récupère le text via l'attribut [data-fr-unchecked-label]\n     */\n  /*\n     * On inclut l'icône check dans un pseudo-element after\n     * On la cache via un text-indent quand l'input n'est pas check\n     */\n}\n\n.fr-toggle label[data-fr-unchecked-label][data-fr-checked-label] {\n  padding-left: 0;\n}\n\n.fr-toggle label[data-fr-unchecked-label][data-fr-checked-label]::before {\n  content: attr(data-fr-unchecked-label) \"\\a\" attr(data-fr-checked-label);\n}\n\n.fr-toggle label[data-fr-unchecked-label][data-fr-checked-label] + .fr-hint-text {\n  margin-top: 0.5rem;\n}\n\n.fr-toggle label::before {\n  flex-shrink: 0;\n  min-width: 2.5rem;\n  height: calc(1.25rem + 1px);\n  margin-top: 1.5rem;\n  margin-left: -2.5rem;\n  margin-right: 1rem;\n  font-size:  0.75rem ;\n  line-height:  1.25rem ;\n  white-space: pre-wrap;\n  overflow: hidden;\n  outline: none !important;\n}\n\n.fr-toggle label::after {\n  font: normal normal normal 1rem/1 dsfr-icon;\n  content: \"\";\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 1rem;\n  left: 0;\n  width: 1.5rem;\n  height: 1.5rem;\n  border-radius: 50%;\n  text-indent: -9999px;\n  z-index: 1;\n}\n\n.fr-toggle .fr-hint-text {\n  display: block;\n  margin-top: 1rem;\n  font-size:  0.75rem ;\n  line-height:  1.25rem ;\n  flex-basis: 100%;\n}\n\n/*\n * Passage du label ferré à gauche, le toggle ferré à droite\n */\n.fr-toggle--label-left .fr-toggle__input {\n  order: 1;\n  margin: 0 0 0 auto;\n}\n\n.fr-toggle--label-left .fr-toggle__input[data-fr-checked-label] ~ .fr-toggle__label {\n  padding-left: 0;\n  padding-right: 1rem;\n}\n\n.fr-toggle--label-left .fr-toggle__label {\n  justify-content: space-between;\n  padding-left: 0;\n  width: calc(100% - 2.5rem);\n}\n\n.fr-toggle--label-left .fr-toggle__label::before {\n  flex-shrink: 0;\n  order: 1;\n  margin-right: -2.5rem;\n  margin-left: 1rem;\n  text-align: right;\n}\n\n.fr-toggle--label-left .fr-toggle__label::after {\n  left: auto;\n  right: 1rem;\n}\n\n.fr-toggle--label-left .fr-hint-text {\n  order: 2;\n}\n\n/*\n * On surcharge les styles de base\n */\n.fr-toggle__list {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n\n.fr-toggle {\n  /*\n    * Ajout d'un séparateur\n    */\n}\n\n.fr-toggle label::before {\n  color: var(--text-active-blue-france);\n}\n\n.fr-toggle label::after {\n  color: var(--text-active-blue-france);\n  box-shadow: inset 0 0 0 1px var(--border-action-high-blue-france);\n  --blend: var(--background-default-grey-blend);\n  background-color: var(--background-default-grey);\n}\n\n.fr-toggle input[type=\"checkbox\"] {\n  box-shadow: inset 0 0 0 1px var(--border-action-high-blue-france);\n}\n\n.fr-toggle input[type=\"checkbox\"]:checked {\n  --blend: var(--background-active-blue-france-blend);\n  background-color: var(--background-active-blue-france);\n}\n\n.fr-toggle input[type=\"checkbox\"]:disabled, .fr-toggle input[type=\"checkbox\"][disabled] {\n  box-shadow: inset 0 0 0 1px var(--border-disabled-grey);\n}\n\n.fr-toggle input[type=\"checkbox\"]:disabled:checked, .fr-toggle input[type=\"checkbox\"][disabled]:checked {\n  --blend: var(--background-disabled-grey-blend);\n  background-color: var(--background-disabled-grey);\n}\n\n.fr-toggle input[type=\"checkbox\"]:disabled + label::before, .fr-toggle input[type=\"checkbox\"][disabled] + label::before {\n  color: var(--text-disabled-grey);\n}\n\n.fr-toggle input[type=\"checkbox\"]:disabled + label::after, .fr-toggle input[type=\"checkbox\"][disabled] + label::after {\n  color: var(--text-disabled-grey);\n  box-shadow: inset 0 0 0 1px var(--border-disabled-grey);\n}\n\n.fr-toggle .fr-hint-text {\n  color: var(--text-mention-grey);\n}\n\n.fr-toggle--border-bottom {\n  box-shadow: inset 0 -1px 0 0 var(--border-default-grey);\n}\n\n.fr-toggle input[type=\"checkbox\"]::-ms-check {\n  display: none;\n}\n\n.fr-toggle {\n  /*\n    * Ajout d'un séparateur\n    */\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle label::before {\n    color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle label::after {\n    color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle label::after {\n    box-shadow: inset 0 0 0 1px #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle label::after {\n    background-color: #fff;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle input[type=\"checkbox\"] {\n    box-shadow: inset 0 0 0 1px #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle input[type=\"checkbox\"]:checked {\n    background-color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle input[type=\"checkbox\"]:disabled, .fr-toggle input[type=\"checkbox\"][disabled] {\n    box-shadow: inset 0 0 0 1px #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle input[type=\"checkbox\"]:disabled:checked, .fr-toggle input[type=\"checkbox\"][disabled]:checked {\n    background-color: #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle input[type=\"checkbox\"]:disabled + label::before, .fr-toggle input[type=\"checkbox\"][disabled] + label::before {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle input[type=\"checkbox\"]:disabled + label::after, .fr-toggle input[type=\"checkbox\"][disabled] + label::after {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle input[type=\"checkbox\"]:disabled + label::after, .fr-toggle input[type=\"checkbox\"][disabled] + label::after {\n    box-shadow: inset 0 0 0 1px #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle .fr-hint-text {\n    color: #666;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-toggle--border-bottom {\n    box-shadow: inset 0 -1px 0 0 #e5e5e5;\n  }\n}\n","////\n/// Toggle Main\n/// @group toggle\n////\n\n/* ------------------------------------ *\\\n  TOGGLE\n\\* ------------------------------------ */\n\n@import 'index';\n@import 'style/module';\n@import 'style/scheme';\n\n@include _toggle-scheme;\n","////\n/// Toggle Module : toggle\n/// @group toggle\n////\n\n#{ns(toggle)} {\n  display: flex;\n  flex-wrap: wrap;\n  @include relative;\n  @include padding(4v 0);\n  @include set-text-margin(0);\n  @include set-title-margin(0);\n\n  /*\n   * On utilise un input de type checkbox pour gérer le toggle\n   * On reset ses styles afin de ne garder que son fonctionnement et son espacement\n   * On l'utilisera égalemement pour afficher l'état du toggle (optionnel)\n   */\n  input[type=\"checkbox\"] {\n    flex-shrink: 0;\n    @include size(10v, 6v);\n    border-radius: space(3v);\n    @include margin(0);\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n\n    /*\n     * On applique des styles aux pseudo-elements du label quand l'input est check.\n     * On change l'ordre du texte d'état du label dans le content pour afficher\n     * la valeur correspondant à l'état checked (optionnel).\n     */\n    &:checked {\n      ~ #{ns(toggle__label)} {\n        &#{ns-attr(unchecked-label)}#{ns-attr(checked-label)} {\n          @include before(attr(#{ns-attr(checked-label, null, true)}) '\\A' attr(#{ns-attr(unchecked-label, null, true)}));\n        }\n\n        @include after {\n          transform: translateX(space(4v));\n          text-indent: 0;\n          @include z-index(focus);\n        }\n      }\n    }\n  }\n\n  label {\n    display: inline-flex;\n    flex-basis: space(calc(100% - 10v));\n    min-height: space(6v);\n    @include padding-left(8v);\n    @include text-style(md);\n\n    /*\n     * Si les data attributes sont présents, on assigne un content au pseudo element before,\n     * et on enlève le padding left du label.\n     */\n    &#{ns-attr(unchecked-label)}#{ns-attr(checked-label)} {\n      @include padding-left(0);\n\n      @include before(attr(#{ns-attr(unchecked-label, null, true)}) '\\A' attr(#{ns-attr(checked-label, null, true)}));\n\n      + #{ns(hint-text)} {\n        @include margin-top(2v);\n      }\n    }\n\n    /*\n     * On prévoit un pseudo-élément pour afficher l'état du bouton( optionnel)\n     * On récupère le text via l'attribut [data-fr-unchecked-label]\n     */\n    @include before {\n      flex-shrink: 0;\n      min-width: space(10v);\n      height: space(calc(5v + 1px));\n      @include margin-top(6v);\n      @include margin-left(-10v);\n      @include margin-right(4v);\n      @include text-style(xs);\n      white-space: pre-wrap;\n      overflow: hidden;\n      outline: none !important;\n    }\n\n    /*\n     * On inclut l'icône check dans un pseudo-element after\n     * On la cache via un text-indent quand l'input n'est pas check\n     */\n    @include icon(check-line, sm, after) {\n      @include display-flex(null,center,center);\n      @include absolute(4v, null, null, 0, 6v, 6v);\n      border-radius: 50%;\n      text-indent: -9999px;\n      @include z-index(over);\n    }\n  }\n\n  #{ns(hint-text)} {\n    display: block;\n    @include margin-top(4v);\n    @include text-style(xs);\n    flex-basis: 100%;\n  }\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Toggle Scheme\n/// @group toggle\n////\n\n@mixin _toggle-scheme($legacy: false) {\n  #{ns(toggle)} {\n    label {\n      @include before {\n        @include scheme-element-text-color(active blue-france, $legacy);\n      }\n\n      @include after {\n        @include scheme-element-text-color(active blue-france, $legacy);\n        @include scheme-element-box-shadow-color(action-high blue-france, $legacy, false, all-1-in);\n        @include scheme-element-bg-color(default grey, $legacy);\n      }\n    }\n\n    input[type=\"checkbox\"] {\n      @include scheme-element-box-shadow-color(action-high blue-france, $legacy, false, all-1-in);\n      // @include disabled-toggle-choice(); // disabled\n\n      &:checked {\n        @include scheme-element-bg-color(active blue-france, $legacy);\n      }\n\n      @include disabled($legacy, false, false, true) {\n        &:checked {\n          @include disabled-colors($legacy, false, true);\n        }\n\n        + label {\n          @include before {\n            @include disabled-colors($legacy, true);\n          }\n\n          @include after {\n            @include disabled-colors($legacy, true, false, true);\n          }\n        }\n      }\n    }\n\n    #{ns(hint-text)} {\n      @include scheme-element-text-color(mention grey, $legacy);\n    }\n\n    /*\n    * Ajout d'un séparateur\n    */\n    &--border-bottom {\n      @include scheme-element-box-shadow-color(default grey, $legacy, false, bottom-1-in);\n    }\n  }\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Function : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if type-of($value) == list {\n    $list: ();\n    $separator: list-separator($value);\n    @each $v in $value {\n      $list: append($list, space($v), $separator);\n    }\n    @return $list;\n  }\n  @if type-of($value) == string {\n    $c: str-index($value, '(');\n    @if $c {\n      $b: null;\n      $n: 0;\n      $i: $c + 1;\n      $l: str-length($value);\n      @while $b == null and $i <= $l {\n        $char: str-slice($value, $i, $i);\n        @if $char == '(' {\n          $n: $n + 1;\n        }\n        @else if $char == ')' {\n          @if $n > 0 {\n            $n: $n - 1;\n          }\n          @else {\n            $b: $i;\n          }\n        }\n        $i: $i + 1;\n      }\n\n      $start: unquote('');\n      $middle: space(str-slice($value, $c + 1, $b - 1));\n      $end: unquote('');\n\n      @if $c > 1 {\n        $start: space(str-slice($value, 1, $c - 1));\n      }\n\n      $l: str-length($value);\n      @if $b < $l {\n        $end: space(str-slice($value, $b + 1, $l));\n      }\n\n      @return unquote('#{$start}(#{$middle})#{$end}');\n    }\n\n    @if str-index($value, ',') {\n      @return space(str-split($value, ','));\n    }\n\n    @if str-index($value, ' ') {\n      @return space(str-split($value, ' '));\n    }\n\n    $value: unquote($value);\n  }\n\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $v: quote($value);\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return $value;\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $part, $decisions, $legacy: false, $important: false, $value: $COLOR, $hover: false) {\n  $result: str-replace($value, '$COLOR', '$color#1');\n  $length: length($decisions) / 2;\n  @for $i from 1 through $length {\n    $token: nth($decisions, $i * 2 - 1);\n    $tint: nth($decisions, $i * 2);\n    @if $tint == accent {\n      $tint: $ACCENT;\n    }\n    $needle: '$color#1';\n    @if length($decisions) > 2 {\n      $needle: '$color##{$i}';\n    }\n    $part-token: _get-part-token($part, $token);\n    $p: map-get($part-token, part);\n    $token: map-get($part-token, token);\n\n    @if $tint == neutral {\n      $tint: _get-neutral-tint($p, $token);\n    }\n    $color: _get-value($p, $token, $tint, $legacy);\n    $result: _replace_color($result, $color, $needle);\n\n    @if $important {\n      $result: #{$result} !important;\n    }\n\n    @if $hover and $part == background and $p == background and $legacy == false {\n      $blend: var(#{_get-decision-prop($part, $token, $tint)}-blend);\n      @if $important {\n        $blend: #{$blend} !important;\n      }\n\n      --blend: #{$blend};\n    }\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(background-color, background, $decisions, $legacy, $important, $COLOR, true);\n}\n\n@mixin scheme-element-bg-transparent($legacy: false, $hover: false) {\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($decisions, $legacy: false, $important: false, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: length($decisions) / 2;\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-text-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(color, text, $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-fill-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(fill, background , $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de border\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n@mixin scheme-element-border-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR, $side:null) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($prop, border, $decisions, $legacy, $important, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($decisions, $legacy: false, $important: false, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: length($decisions) / 2;\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $decisions, $legacy, $important, space($value));\n}\n\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Spacing z-index\n/// @group core\n////\n\n/// Fonction de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@function z-index($index-name) {\n  @return map-get($z-indexes, $index-name);\n}\n\n/// Mixin de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@mixin z-index($index-name, $focus: false) {\n  z-index: z-index($index-name);\n  @if $focus {\n    $focus-z-index: z-index($index-name + '-focus');\n\n    @if $focus-z-index != null {\n      *:focus,\n      *:focus-visible {\n        z-index: #{$focus-z-index};\n      }\n    }\n  }\n}\n","////\n/// Core Setting : Spacing z-index\n/// @group core\n////\n\n/// Liste des z-index présent dans le DS\n/// @type map\n$z-indexes: (\n  auto: auto,\n  under: -1,\n  base: 0,\n  over: 1,\n  focus: 2000,\n  menu: 2500,\n  menu-focus: 3000,\n  nav: 3500,\n  nav-focus: 4000,\n  consent: 4500,\n  consent-focus: 5000,\n  modal: 5500,\n  modal-focus: 6000,\n  modal-footer: 6500,\n);\n","////\n/// Core Tool : Icon\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin icon-size($size:md) {\n  font-size: #{icon-size($size)} !important;\n}\n\n@mixin with-icon($size:md) {\n  @include has-icon {\n    @include before {\n      @if $size != md {\n        @include icon-size($size);\n      }\n      @content;\n    }\n  }\n}\n\n@mixin generate-icons($base) {\n  @each $icon, $settings in $icons-settings {\n    #{ns($base + '-' + $icon)} {\n      @include before(icon-glyph($icon));\n    }\n  }\n}\n\n@function icon-glyph($icon, $is-ligature: false) {\n  $icon-settings: map-get($icons-settings, $icon);\n  @if $is-ligature {\n    @return \"#{map-get($icon-settings, ligature)}\";\n  }\n  @else {\n    @return \"#{map-get($icon-settings, codepoint)}\";\n  }\n}\n\n@mixin icon-content($icon) {\n  content: icon-glyph($icon);\n}\n\n@function font-icon($size: md) {\n  @return normal normal normal #{icon-size($size)}/1 #{$namespace}-icon;\n}\n\n@mixin font-icon($size: md) {\n  font: font-icon($size);\n}\n\n@mixin icon($icon:null, $size:md, $pseudo:before) {\n  @include _pseudo($pseudo) {\n    @if $size != null {\n      @include font-icon($size);\n    }\n\n    @if $icon != null {\n      @include icon-content($icon);\n    }\n\n    @content;\n  }\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Toggle Module : Variants\n/// @group toggle\n////\n\n/*\n * Passage du label ferré à gauche, le toggle ferré à droite\n */\n#{ns(toggle--label-left)} {\n  #{ns(toggle__input)} {\n    order: 1;\n    @include margin(0 0 0 auto);\n\n    &#{ns-attr(checked-label)} ~ #{ns(toggle__label)} {\n      @include padding-left(0);\n      @include padding-right(4v);\n    }\n  }\n\n  #{ns(toggle__label)} {\n    justify-content: space-between;\n    @include padding-left(0);\n    width: calc(100% - #{space(10v)});\n\n    @include before {\n      flex-shrink: 0;\n      order: 1;\n      @include margin-right(-10v);\n      @include margin-left(4v);\n      text-align: right;\n    }\n\n    @include after {\n      left: auto;\n      right: space(4v);\n    }\n  }\n\n  #{ns(hint-text)} {\n    order: 2;\n  }\n}\n","////\n/// Toggle Module : Group\n/// @group toggle\n////\n\n/*\n * On surcharge les styles de base\n */\n#{ns(toggle)}__list {\n  @include disable-list-style;\n}\n","////\n/// Core Tool : Reset list\n/// @group core\n////\n\n@mixin enable-list-style() {\n  $selector: null;\n\n  @if & == null {\n    $selector: ':root';\n  }\n\n  @include nest($selector) {\n    --ul-type: \"●\\00a0\\00a0\";\n    --ol-type: decimal;\n    --ul-start: #{space(4v)};\n    --ol-start: #{space(6v)};\n    --xl-block: #{space(2v)};\n    --li-bottom: #{space(1v)};\n    --xl-base: 1em;\n    --ol-content: counters(li-counter, \".\") \".\\00a0\\00a0\";\n  }\n}\n\n@mixin disable-list-style() {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n","////\n/// Core Tool : Color disabled\n/// @group core\n////\n\n@mixin disabled-colors($legacy:false, $text:true, $background:false, $box-shadow-border: false) {\n  @if $text {\n    @include scheme-element-text-color(disabled grey, $legacy);\n  }\n\n  @if $background {\n    @include scheme-element-bg-color(disabled grey, $legacy);\n  }\n\n  @if $box-shadow-border == true {\n    @include scheme-element-box-shadow-color(disabled grey, $legacy);\n  }\n  @else if $box-shadow-border != false {\n    @include scheme-element-box-shadow-color(disabled neutral, $legacy, false, $box-shadow-border);\n  }\n}\n\n@mixin disabled($legacy:false, $text:false, $background:false, $box-shadow-border: false, $can-be-link: false) {\n  $selectors: '&:disabled, &[disabled]';\n  @if $can-be-link {\n    $selectors: append($selectors, selector-associate(&, 'a:not([href])'), comma);\n  }\n\n  @at-root #{$selectors} {\n    @include disabled-colors($legacy, $text, $background, $box-shadow-border);\n    @content;\n  }\n}\n","////\n/// Toggle Legacy\n/// @group toggle\n////\n\n#{ns(toggle)} {\n  input[type=\"checkbox\"] {\n    &::-ms-check {\n      display: none;\n    }\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n"]}