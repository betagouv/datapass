{"version":3,"sources":["<no source>","../../../../../../src/core/style/selector/tool/_breakpoint.scss","../../../../../../src/core/style/selector/tool/_block.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../sidemenu.legacy.css","../../../../../../src/legacy/style/tool/_legacy.scss","../../../../../../src/component/sidemenu/style/_scheme.scss","../../../../../../src/component/sidemenu/style/_legacy.scss","../../../../../../src/core/style/selector/tool/_pseudo.scss"],"names":[],"mappings":"AAAA;;GAAA,ACkBI,wBCMD,uFC+IC,eC5GF,CAvBF,CCtBI,qGCmBA,oBHaE,mCCmBJ,CEzBK,wCHMD,kCCyBJ,CEzBK,8CHAD,kCC+BJ,CAXF,CCpDI,2DELF,YACE,WHHF,CFDA,oBCwCI,aCvBJ,CFCC,uFCsBG,mCCOJ,CEAE,qCHPE,aCqCJ,CE9BG,iEHPC,aC2CJ,CIzEA,6EL8BI,wBCiDJ,CE7BY,sCHpBR,qBCuDJ,CA7FF","file":"sidemenu.legacy.min.css","sourcesContent":[null,"////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Core Tool : Selector block\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $part, $decisions, $legacy: false, $important: false, $value: $COLOR, $hover: false) {\n  $result: str-replace($value, '$COLOR', '$color#1');\n  $length: length($decisions) / 2;\n  @for $i from 1 through $length {\n    $token: nth($decisions, $i * 2 - 1);\n    $tint: nth($decisions, $i * 2);\n    @if $tint == accent {\n      $tint: $ACCENT;\n    }\n    $needle: '$color#1';\n    @if length($decisions) > 2 {\n      $needle: '$color##{$i}';\n    }\n    $part-token: _get-part-token($part, $token);\n    $p: map-get($part-token, part);\n    $token: map-get($part-token, token);\n\n    @if $tint == neutral {\n      $tint: _get-neutral-tint($p, $token);\n    }\n    $color: _get-value($p, $token, $tint, $legacy);\n    $result: _replace_color($result, $color, $needle);\n\n    @if $important {\n      $result: #{$result} !important;\n    }\n\n    @if $hover and $part == background and $p == background and $legacy == false {\n      $blend: var(#{_get-decision-prop($part, $token, $tint)}-blend);\n      @if $important {\n        $blend: #{$blend} !important;\n      }\n\n      --blend: #{$blend};\n    }\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(background-color, background, $decisions, $legacy, $important, $COLOR, true);\n}\n\n@mixin scheme-element-bg-transparent($legacy: false, $hover: false) {\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($decisions, $legacy: false, $important: false, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: length($decisions) / 2;\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-text-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(color, text, $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n@mixin scheme-element-fill-color($decisions, $legacy: false, $important: false) {\n  @include _scheme-element(fill, background , $decisions, $legacy, $important);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de border\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n@mixin scheme-element-border-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR, $side:null) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($prop, border, $decisions, $legacy, $important, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($decisions, $legacy: false, $important: false, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $decisions, $legacy, $important, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String} $decisions - token de décision\n/// @param {Boolean} $important - Si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($decisions, $legacy: false, $important: false, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: length($decisions) / 2;\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $decisions, $legacy, $important, space($value));\n}\n\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","@charset \"UTF-8\";\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n  * Correctif de la hauteur de la navigation latérale\n  */\n  .fr-sidenav {\n    height: auto;\n  }\n}\n\n.fr-sidemenu {\n  /*\n    @include scheme-element-bg-color(default grey);\n\n    @include respond-from(md) {\n      @include scheme-element-bg-transparent($legacy, true);\n    }\n    */\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-sidemenu__title {\n    color: #161616;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-sidemenu__title {\n    box-shadow: inset 0 -1px 0 0 #e5e5e5;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-sidemenu__title {\n    box-shadow: none;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-sidemenu__item {\n    box-shadow: inset 0 -1px 0 0 #e5e5e5;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-sidemenu__item {\n    box-shadow: none;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-sidemenu__item:last-child .fr-sidemenu__btn {\n    box-shadow: inset 0 -1px 0 0 #e5e5e5;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-sidemenu__item:last-child .fr-sidemenu__btn {\n    box-shadow: none;\n  }\n}\n\n@media all and (min-width: 48em) and (-ms-high-contrast: none), (min-width: 48em) and (-ms-high-contrast: active) {\n  .fr-sidemenu__inner {\n    box-shadow: inset -1px 0 0 0 #e5e5e5;\n  }\n}\n\n@media all and (min-width: 48em) and (-ms-high-contrast: none), (min-width: 48em) and (-ms-high-contrast: active) {\n  .fr-sidemenu--right .fr-sidemenu__inner {\n    box-shadow: inset 1px 0 0 0 #e5e5e5;\n  }\n}\n\n@media all and (min-width: 48em) and (-ms-high-contrast: none), (min-width: 48em) and (-ms-high-contrast: active) {\n  .fr-sidemenu--full-border .fr-sidemenu__inner {\n    box-shadow: inset 0 0 0 1px #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-sidemenu__link, .fr-sidemenu__btn {\n    color: #161616;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-sidemenu__link[aria-current], .fr-sidemenu__btn[aria-current] {\n    color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-sidemenu__link[aria-current]::after, .fr-sidemenu__btn[aria-current]::after {\n    background-color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-sidemenu__inner > .fr-sidemenu__btn {\n    background-color: #fff;\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Sidemenu Scheme\n/// @group sidemenu\n////\n\n@mixin _sidemenu-scheme($legacy: false) {\n  #{ns(sidemenu)} {\n    /*\n    @include scheme-element-bg-color(default grey);\n\n    @include respond-from(md) {\n      @include scheme-element-bg-transparent($legacy, true);\n    }\n    */\n\n    @include title {\n      @include scheme-element-text-color(title grey, $legacy);\n      @include scheme-element-box-shadow-color(default grey, $legacy, false, bottom-1-in);\n      @include scheme-element-no-box-shadow(md);\n    }\n\n    @include list-item {\n      @include scheme-element-box-shadow-color(default grey, $legacy, false, bottom-1-in);\n      @include scheme-element-no-box-shadow(md);\n\n      &:last-child {\n        #{ns(sidemenu__btn)} {\n          @include scheme-element-box-shadow-color(default grey, $legacy, false, bottom-1-in);\n          @include scheme-element-no-box-shadow(md);\n        }\n      }\n    }\n\n    &__inner {\n      @include respond-from(md) {\n        @include scheme-element-box-shadow-color(default grey, $legacy, false, right-1-in);\n      }\n    }\n\n    @include respond-from(md) {\n      &--right {\n        #{ns(sidemenu__inner)} {\n          @include scheme-element-box-shadow-color(default grey, $legacy, false, left-1-in);\n        }\n      }\n\n      &--full-border {\n        #{ns(sidemenu__inner)} {\n          @include scheme-element-box-shadow-color(default grey, $legacy);\n        }\n      }\n    }\n\n    &__link,\n    &__btn {\n      @include scheme-element-text-color(action-high grey, $legacy);\n\n      &[aria-current] {\n        @include scheme-element-text-color(active blue-france, $legacy);\n        @include after {\n          @include scheme-element-bg-color(border-active blue-france, $legacy);\n        }\n      }\n    }\n\n    &__btn {\n      @at-root #{ns(sidemenu__inner)} > #{&} {\n        @include scheme-element-bg-color(default grey, $legacy);\n      }\n    }\n  }\n}\n","////\n/// Sidemenu Legacy\n/// @group sidemenu\n////\n\n@include legacy(ie11) {\n  /**\n  * Correctif de la hauteur de la navigation latérale\n  */\n  #{ns(sidenav)} {\n    height: auto;\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n"]}