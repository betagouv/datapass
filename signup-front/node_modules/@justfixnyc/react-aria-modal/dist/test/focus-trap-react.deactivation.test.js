import React from "react";
import ReactDOM from "react-dom";
import TestUtils from "react-dom/test-utils";
import { ReactFocusTrap as FocusTrap } from "../src/focus-trap-react";
describe("deactivation", () => {
    let domContainer;
    const createMockFocusTrap = () => ({
        activate: jest.fn(),
        deactivate: jest.fn(),
        pause: jest.fn(),
    });
    let mockFocusTrap = createMockFocusTrap();
    let mockCreateFocusTrap;
    beforeEach(() => {
        mockFocusTrap = createMockFocusTrap();
        mockCreateFocusTrap = jest.fn(() => mockFocusTrap);
        domContainer = document.createElement("div");
        document.body.appendChild(domContainer);
    });
    afterEach(() => {
        ReactDOM.unmountComponentAtNode(domContainer);
        document.body.removeChild(domContainer);
    });
    test("deactivation", () => {
        class TestZone extends React.Component {
            constructor() {
                super(...arguments);
                this.state = {
                    trapActive: true,
                };
                this.deactivateTrap = () => {
                    this.setState({ trapActive: false });
                };
            }
            render() {
                return (React.createElement("div", null,
                    React.createElement("button", { ref: "trigger", onClick: this.deactivateTrap }, "deactivate"),
                    React.createElement(FocusTrap, { ref: "trap", _createFocusTrap: mockCreateFocusTrap, active: this.state.trapActive },
                        React.createElement("div", null,
                            React.createElement("button", null, "something special")))));
            }
        }
        const zone = ReactDOM.render(React.createElement(TestZone, null), domContainer);
        expect(mockFocusTrap.deactivate).toHaveBeenCalledTimes(0);
        TestUtils.Simulate.click(ReactDOM.findDOMNode(zone.refs.trigger));
        expect(mockFocusTrap.deactivate).toHaveBeenCalledTimes(1);
    });
    test("deactivation respects `returnFocusOnDeactivate` option", () => {
        class TestZone extends React.Component {
            constructor() {
                super(...arguments);
                this.state = {
                    trapActive: true,
                };
                this.deactivateTrap = () => {
                    this.setState({ trapActive: false });
                };
            }
            render() {
                return (React.createElement("div", null,
                    React.createElement("button", { ref: "trigger", onClick: this.deactivateTrap }, "deactivate"),
                    React.createElement(FocusTrap, { ref: (component) => (this.trap = component), _createFocusTrap: mockCreateFocusTrap, active: this.state.trapActive, focusTrapOptions: { returnFocusOnDeactivate: true } },
                        React.createElement("div", null,
                            React.createElement("button", null, "something special")))));
            }
        }
        const zone = ReactDOM.render(React.createElement(TestZone, null), domContainer);
        // mock deactivate on the fouscTrap instance for we can asset
        // that we are passing the correct config to the focus trap.
        zone.trap.focusTrap.deactivate = jest.fn();
        TestUtils.Simulate.click(ReactDOM.findDOMNode(zone.refs.trigger));
        expect(zone.trap.focusTrap.deactivate).toHaveBeenCalledWith({
            returnFocus: true,
        });
    });
    test("deactivation by dismount", () => {
        class TestZone extends React.Component {
            constructor() {
                super(...arguments);
                this.state = {
                    trapActive: true,
                };
                this.deactivateTrap = () => {
                    this.setState({ trapActive: false });
                };
            }
            render() {
                const trap = this.state.trapActive ? (React.createElement(FocusTrap, { _createFocusTrap: mockCreateFocusTrap, ref: "trap" },
                    React.createElement("button", null, "something special"))) : (false);
                return (React.createElement("div", null,
                    React.createElement("button", { ref: "trigger", onClick: this.deactivateTrap }, "deactivate"),
                    trap));
            }
        }
        const zone = ReactDOM.render(React.createElement(TestZone, null), domContainer);
        expect(mockFocusTrap.deactivate).toHaveBeenCalledTimes(0);
        TestUtils.Simulate.click(ReactDOM.findDOMNode(zone.refs.trigger));
        expect(mockFocusTrap.deactivate).toHaveBeenCalledTimes(1);
    });
});
//# sourceMappingURL=focus-trap-react.deactivation.test.js.map