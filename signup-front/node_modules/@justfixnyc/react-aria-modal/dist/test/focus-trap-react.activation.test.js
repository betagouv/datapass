import React from "react";
import ReactDOM from "react-dom";
import TestUtils from "react-dom/test-utils";
import { ReactFocusTrap as FocusTrap } from "../src/focus-trap-react";
describe("activation", () => {
    let domContainer;
    const createMockFocusTrap = () => ({
        activate: jest.fn(),
        deactivate: jest.fn(),
        pause: jest.fn(),
    });
    let mockFocusTrap = createMockFocusTrap();
    let mockCreateFocusTrap;
    beforeEach(() => {
        mockFocusTrap = createMockFocusTrap();
        mockCreateFocusTrap = jest.fn(() => mockFocusTrap);
        domContainer = document.createElement("div");
        document.body.appendChild(domContainer);
    });
    afterEach(() => {
        ReactDOM.unmountComponentAtNode(domContainer);
        document.body.removeChild(domContainer);
    });
    test("default activation", () => {
        const trap = ReactDOM.render(React.createElement(FocusTrap, { _createFocusTrap: mockCreateFocusTrap, focusTrapOptions: { onDeactivate: noop } },
            React.createElement("button", null, "something special")), domContainer);
        expect(mockCreateFocusTrap).toHaveBeenCalledTimes(1);
        expect(mockCreateFocusTrap).toHaveBeenCalledWith(ReactDOM.findDOMNode(trap), {
            onDeactivate: noop,
            returnFocusOnDeactivate: false,
        });
    });
    test("activation with initialFocus as selector", () => {
        const trap = ReactDOM.render(React.createElement(FocusTrap, { _createFocusTrap: mockCreateFocusTrap, focusTrapOptions: {
                onDeactivate: noop,
                initialFocus: "#initial-focusee",
            } },
            React.createElement("div", null,
                React.createElement("button", null, "something special"),
                React.createElement("button", { id: "initial-focusee" }, "another thing"))), domContainer);
        expect(mockCreateFocusTrap).toHaveBeenCalledTimes(1);
        expect(mockCreateFocusTrap).toHaveBeenCalledWith(ReactDOM.findDOMNode(trap), {
            onDeactivate: noop,
            initialFocus: "#initial-focusee",
            returnFocusOnDeactivate: false,
        });
    });
    test("mounting without activation", () => {
        ReactDOM.render(React.createElement(FocusTrap, { _createFocusTrap: mockCreateFocusTrap, focusTrapOptions: { onDeactivate: noop }, active: false },
            React.createElement("button", null, "something special")), domContainer);
        expect(mockCreateFocusTrap).toHaveBeenCalledTimes(1);
        expect(mockFocusTrap.activate).toHaveBeenCalledTimes(0);
    });
    test("mounting without activation then activating", () => {
        class TestZone extends React.Component {
            constructor() {
                super(...arguments);
                this.state = {
                    trapActive: false,
                };
                this.activateTrap = () => {
                    this.setState({ trapActive: true });
                };
            }
            render() {
                return (React.createElement("div", null,
                    React.createElement("button", { ref: "trigger", onClick: this.activateTrap }, "activate"),
                    React.createElement(FocusTrap, { _createFocusTrap: mockCreateFocusTrap, ref: "trap", focusTrapOptions: { onDeactivate: noop }, active: this.state.trapActive },
                        React.createElement("button", null, "something special"))));
            }
        }
        const zone = ReactDOM.render(React.createElement(TestZone, null), domContainer);
        expect(mockCreateFocusTrap).toHaveBeenCalledTimes(1);
        expect(mockCreateFocusTrap).toHaveBeenCalledWith(ReactDOM.findDOMNode(zone.refs.trap), {
            onDeactivate: noop,
            returnFocusOnDeactivate: false,
        });
        expect(mockFocusTrap.activate).toHaveBeenCalledTimes(0);
        TestUtils.Simulate.click(ReactDOM.findDOMNode(zone.refs.trigger));
        expect(mockFocusTrap.activate).toHaveBeenCalledTimes(1);
    });
});
function noop() { }
//# sourceMappingURL=focus-trap-react.activation.test.js.map