import React from "react";
import ReactDOM from "react-dom";
import TestUtils from "react-dom/test-utils";
import { ReactFocusTrap as FocusTrap } from "../src/focus-trap-react";
describe("dom", () => {
    let domContainer;
    const createMockFocusTrap = () => ({
        activate: jest.fn(),
        deactivate: jest.fn(),
        pause: jest.fn(),
    });
    let mockFocusTrap = createMockFocusTrap();
    let mockCreateFocusTrap;
    beforeEach(() => {
        mockFocusTrap = createMockFocusTrap();
        mockCreateFocusTrap = jest.fn(() => mockFocusTrap);
        domContainer = document.createElement("div");
        document.body.appendChild(domContainer);
        // This surpresses React error boundary logs for testing intentionally
        // thrown errors, like in some test cases in this suite. See discussion of
        // this here: https://github.com/facebook/react/issues/11098
        jest.spyOn(console, "error");
        global.console.error.mockImplementation(() => { });
    });
    afterEach(() => {
        ReactDOM.unmountComponentAtNode(domContainer);
        document.body.removeChild(domContainer);
        global.console.error.mockRestore();
    });
    test("DOM with only required props", () => {
        const trap = TestUtils.renderIntoDocument(React.createElement(FocusTrap, { _createFocusTrap: mockCreateFocusTrap },
            React.createElement("div", null,
                React.createElement("button", null, "something special"))));
        const trapNode = ReactDOM.findDOMNode(trap);
        expect(trapNode.tagName).toBe("DIV");
        expect(trapNode.getAttribute("id")).toBe(null);
        expect(trapNode.getAttribute("class")).toBe(null);
        expect(trapNode.getAttribute("style")).toBe(null);
        expect(trapNode.children.length).toBe(1);
        expect(trapNode.firstChild.tagName).toBe("BUTTON");
        expect(trapNode.firstChild.innerHTML).toBe("something special");
    });
    test("DOM with all possible DOM-related props", () => {
        const trap = TestUtils.renderIntoDocument(React.createElement(FocusTrap, { _createFocusTrap: mockCreateFocusTrap },
            React.createElement("figure", { id: "foo", className: "bar" },
                React.createElement("button", null, "something special"))));
        const trapNode = ReactDOM.findDOMNode(trap);
        expect(trapNode.tagName).toBe("FIGURE");
        expect(trapNode.getAttribute("id")).toBe("foo");
        expect(trapNode.getAttribute("class")).toBe("bar");
        expect(trapNode.children.length).toBe(1);
        expect(trapNode.firstChild.tagName).toBe("BUTTON");
        expect(trapNode.firstChild.innerHTML).toBe("something special");
    });
    test("FocusTrap throws with no child provided to it", () => {
        expect(() => TestUtils.renderIntoDocument(React.createElement(FocusTrap, { _createFocusTrap: mockCreateFocusTrap }))).toThrowError("expected to receive a single React element child");
    });
    test("FocusTrap throws with a plain text child provided to it", () => {
        expect(() => TestUtils.renderIntoDocument(React.createElement(FocusTrap, { _createFocusTrap: mockCreateFocusTrap }, "Some text that is not a DOM node"))).toThrowError("expected to receive a single React element child");
    });
    test("FocusTrap throws with multiple children provided to it", () => {
        expect(() => TestUtils.renderIntoDocument(React.createElement(FocusTrap, { _createFocusTrap: mockCreateFocusTrap },
            React.createElement("div", null, "First div"),
            React.createElement("div", null, "Second div")))).toThrowError("expected to receive a single React element child");
    });
    test("FocusTrap preserves child ref by composing", () => {
        const childRef = jest.fn();
        TestUtils.renderIntoDocument(React.createElement(FocusTrap, { _createFocusTrap: mockCreateFocusTrap },
            React.createElement("div", { ref: childRef })));
        expect(childRef).toHaveBeenCalledTimes(1);
    });
});
//# sourceMappingURL=focus-trap-react.dom.test.js.map