// needs to be a class so we can instanceof
export class Matcher {
    asymmetricMatch;
    description;
    $$typeof;
    inverse;
    constructor(asymmetricMatch, description) {
        this.asymmetricMatch = asymmetricMatch;
        this.description = description;
        this.$$typeof = Symbol.for('jest.asymmetricMatcher');
    }
    toString() {
        return this.description;
    }
    toAsymmetricMatcher() {
        return this.description;
    }
    getExpectedType() {
        return 'undefined';
    }
}
export class CaptorMatcher {
    $$typeof;
    asymmetricMatch;
    value;
    values = [];
    constructor() {
        this.$$typeof = Symbol.for('jest.asymmetricMatcher');
        this.asymmetricMatch = (actualValue) => {
            // @ts-ignore
            this.value = actualValue;
            this.values.push(actualValue);
            return true;
        };
    }
    getExpectedType() {
        return 'Object';
    }
    toString() {
        return 'captor';
    }
    toAsymmetricMatcher() {
        return 'captor';
    }
}
export const any = () => new Matcher(() => true, 'any()');
export const anyBoolean = () => new Matcher((actualValue) => typeof actualValue === 'boolean', 'anyBoolean()');
export const anyNumber = () => new Matcher((actualValue) => typeof actualValue === 'number' && !isNaN(actualValue), 'anyNumber()');
export const anyString = () => new Matcher((actualValue) => typeof actualValue === 'string', 'anyString()');
export const anyFunction = () => new Matcher((actualValue) => typeof actualValue === 'function', 'anyFunction()');
export const anySymbol = () => new Matcher((actualValue) => typeof actualValue === 'symbol', 'anySymbol()');
export const anyObject = () => new Matcher((actualValue) => typeof actualValue === 'object' && actualValue !== null, 'anyObject()');
export const anyArray = () => new Matcher((actualValue) => Array.isArray(actualValue), 'anyArray()');
export const anyMap = () => new Matcher((actualValue) => actualValue instanceof Map, 'anyMap()');
export const anySet = () => new Matcher((actualValue) => actualValue instanceof Set, 'anySet()');
export const isA = (clazz) => new Matcher((actualValue) => actualValue instanceof clazz, 'isA()');
export const arrayIncludes = (arrayVal) => new Matcher((actualValue) => Array.isArray(actualValue) && actualValue.includes(arrayVal), 'arrayIncludes()');
export const setHas = (arrayVal) => new Matcher((actualValue) => anySet().asymmetricMatch(actualValue) && actualValue.has(arrayVal), 'setHas()');
export const mapHas = (mapVal) => new Matcher((actualValue) => anyMap().asymmetricMatch(actualValue) && actualValue.has(mapVal), 'mapHas()');
export const objectContainsKey = (key) => new Matcher((actualValue) => anyObject().asymmetricMatch(actualValue) && actualValue[key] !== undefined, 'objectContainsKey()');
export const objectContainsValue = (value) => new Matcher((actualValue) => anyObject().asymmetricMatch(actualValue) && Object.values(actualValue).includes(value), 'objectContainsValue()');
export const notNull = () => new Matcher((actualValue) => actualValue !== null, 'notNull()');
export const notUndefined = () => new Matcher((actualValue) => actualValue !== undefined, 'notUndefined()');
export const notEmpty = () => new Matcher((actualValue) => actualValue !== null && actualValue !== undefined && actualValue !== '', 'notEmpty()');
export const captor = () => new CaptorMatcher();
export const matches = (matcher) => new Matcher(matcher, 'matches()');
