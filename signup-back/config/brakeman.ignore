{
  "ignored_warnings": [
    {
      "warning_type": "File Access",
      "warning_code": 16,
      "fingerprint": "284a45cb0fd6d69ca85ca9f181153eca233008257789f828b70bbc3d0b65e5c4",
      "check_name": "SendFile",
      "message": "Model attribute used in file name",
      "file": "app/controllers/documents_controller.rb",
      "line": 7,
      "link": "https://brakemanscanner.org/docs/warning_types/file_access/",
      "code": "send_file(authorize(Document.find(params[:id]), :policy_class => (DocumentPolicy)).attachment.current_path)",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "DocumentsController",
        "method": "show"
      },
      "user_input": "Document.find(params[:id])",
      "confidence": "Weak",
      "note": ""
    },
    {
      "warning_type": "Dangerous Send",
      "warning_code": 23,
      "fingerprint": "4eb4e99a866c4c55f309cca766f7ad66b69fd8da642586f35d9911d4f164aec8",
      "check_name": "Send",
      "message": "User controlled method execution",
      "file": "app/controllers/enrollments_controller.rb",
      "line": 182,
      "link": "https://brakemanscanner.org/docs/warning_types/dangerous_send/",
      "code": "authorize(Enrollment.find(params[:id]), \"#{params[:event]}?\".to_sym).send(params[:event].to_sym, :user_id => current_user.id, :comment => params[:comment])",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "EnrollmentsController",
        "method": "trigger"
      },
      "user_input": "params[:event].to_sym",
      "confidence": "High",
      "note": ""
    },
    {
      "warning_type": "Remote Code Execution",
      "warning_code": 24,
      "fingerprint": "529871f7adad19ff9ef759de82f4a03754f221a3f42c69216d1e1f6429c46241",
      "check_name": "UnsafeReflection",
      "message": "Unsafe reflection method `constantize` called with parameter value",
      "file": "app/controllers/enrollments_controller.rb",
      "line": 107,
      "link": "https://brakemanscanner.org/docs/warning_types/remote_code_execution/",
      "code": "\"Enrollment::#{params.fetch(:enrollment, {})[\"target_api\"].underscore.classify}\".constantize",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "EnrollmentsController",
        "method": "create"
      },
      "user_input": "params.fetch(:enrollment, {})[\"target_api\"].underscore.classify",
      "confidence": "High",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "8592b6a3a71a436db6b921a352a9f0faad7e4e498a2fd81a5944211c6ae2338a",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/mailers/webhook_mailer.rb",
      "line": 22,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "User.where(\"'#{params[:target_api]}:instructor' = ANY(roles)\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "WebhookMailer",
        "method": "target_api_instructor_emails"
      },
      "user_input": "params[:target_api]",
      "confidence": "High",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "8f8306c06d853d0eaae6dc447c658e6ace5dffcc904797c41fb9d7611e30f55b",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/enrollments_controller.rb",
      "line": 47,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "policy_scope(Enrollment).where(:target_api => params.fetch(:target_api, false)).order(\"\\\"enrollments\\\".\\\"#{sort_key}\\\" #{sort_direction.upcase}\").includes(:team_members).where(\"#{(filter_key.split(\".\").map do\n \"\\\"#{e}\\\"\"\n end.join(\".\") or \"\\\"enrollments\\\".\\\"#{filter_key}\\\"\")}::varchar(255) ~* ?\", (if [\"id\", \"siret\", \"nom_raison_sociale\", \"team_members.email\"].include?(filter_key) then\n  \".*(#{(filter_value or [filter_value]).map do\n   Regexp.escape(f)\n   end.map do\n   ActiveSupport::Inflector.transliterate(f, \" \")\n   end.join(\"|\")}).*\"\nelse\n  \"^(#{(filter_value or [filter_value]).map do\n   Regexp.escape(f)\n   end.map do\n   ActiveSupport::Inflector.transliterate(f, \" \")\n   end.join(\"|\")})$\"\nend))",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "EnrollmentsController",
        "method": "index"
      },
      "user_input": "filter_key.split(\".\").map do\n \"\\\"#{e}\\\"\"\n end.join(\".\")",
      "confidence": "Weak",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "aac97180b952af4721ad5375d2e637a78a4140ac35b1ff82c228d1853570c5c1",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/models/enrollment.rb",
      "line": 116,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "User.where(\"'#{target_api}:subscriber' = ANY(roles)\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Enrollment",
        "method": "subscribers"
      },
      "user_input": "target_api",
      "confidence": "Medium",
      "note": ""
    },
    {
      "warning_type": "Cross-Site Scripting",
      "warning_code": 106,
      "fingerprint": "c8adc1c0caf2c9251d1d8de588fb949070212d0eed5e1580aee88bab2287b772",
      "check_name": "SanitizeMethods",
      "message": "loofah gem 2.11.0 is vulnerable (CVE-2018-8048). Upgrade to 2.2.1",
      "file": "Gemfile.lock",
      "line": 178,
      "link": "https://github.com/flavorjones/loofah/issues/144",
      "code": null,
      "render_path": null,
      "location": null,
      "user_input": null,
      "confidence": "Medium",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "f535c1304265e6a439f11ba3b7708752486d45eacb234932214770395c6a4160",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/controllers/enrollments_controller.rb",
      "line": 21,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "policy_scope(Enrollment).where(:target_api => params.fetch(:target_api, false)).order(\"\\\"enrollments\\\".\\\"#{sort_key}\\\" #{sort_direction.upcase}\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "EnrollmentsController",
        "method": "index"
      },
      "user_input": "sort_key",
      "confidence": "Weak",
      "note": ""
    }
  ],
  "updated": "2021-09-03 13:51:59 +0200",
  "brakeman_version": "5.0.1"
}
